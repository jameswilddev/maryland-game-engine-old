using Maryland.DataTypes;
using Moq;
using System.Collections.Immutable;
using System.Numerics;

namespace Maryland.Unit.DataTypes
{
    [TestClass]
    public sealed class MeshDeserializerTests
    {
        private static readonly ImmutableArray<byte> FirstTransformIndices = ImmutableArray.Create<byte>(3, 2, 1, 4, 3, 5, 0, 2, 1, 4);
        private static readonly ImmutableArray<byte> SecondTransformIndices = ImmutableArray.Create<byte>(4, 2, 3, 1, 5, 2, 2, 3, 0, 3);

        private static readonly ImmutableArray<byte> SerializedTransforms = ImmutableArray.Create<byte>
        (
            // Quantity.
            6,

            // Identifiers.
            0x7f, 0x9f, 0xcb, 0x78, 0x7a, 0x0f, 0x4a, 0x1c, 0xab, 0x2e, 0xc6, 0xe9, 0xcf, 0xd7, 0xe6, 0xdc,
            0xa1, 0x3e, 0xe5, 0x1b, 0x17, 0xcb, 0x47, 0x0d, 0x99, 0xf1, 0x08, 0x3d, 0x5f, 0xae, 0x52, 0x56,

            0x04, 0x5e, 0xca, 0x75, 0xc5, 0x7b, 0x45, 0xc9, 0xbb, 0x4f, 0x9b, 0x19, 0x6a, 0x8c, 0xa1, 0x42,
            0x34, 0x5b, 0xb8, 0x41, 0xed, 0x88, 0x40, 0x70, 0x8b, 0x46, 0x6f, 0x9d, 0x38, 0x21, 0xae, 0x2d,
            0x4e, 0xec, 0x95, 0x62, 0x85, 0x8a, 0x4c, 0x5f, 0xb3, 0x3b, 0xeb, 0x2f, 0xdc, 0xb3, 0x7b, 0x25,

            0xc3, 0x5a, 0x90, 0x15, 0x95, 0x00, 0x43, 0x31, 0xb5, 0xbf, 0x52, 0x51, 0x60, 0xdf, 0xe9, 0x18
        );

        private static readonly ImmutableArray<byte> SerializedFirstTransformPositions = ImmutableArray.Create<byte>
        (
            0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
            0x19, 0x04, 0x16, 0x3f, 0x0c, 0x02, 0x6b, 0x3f, 0x37, 0x89, 0x41, 0x3e,
            0x06, 0x81, 0x95, 0x3d, 0x50, 0x8d, 0x37, 0x3f, 0x48, 0xe1, 0xba, 0x3e,
            0xaa, 0xf1, 0xd2, 0x3d, 0xf6, 0x28, 0xdc, 0x3e, 0xae, 0x47, 0x41, 0x3f,
            0x4a, 0x0c, 0x22, 0x3f, 0x21, 0xb0, 0x52, 0x3f, 0x50, 0x8d, 0x57, 0x3f,
            0x89, 0x41, 0x40, 0x3f, 0xcb, 0xa1, 0xc5, 0x3e, 0xd3, 0x4d, 0x42, 0x3f,
            0x91, 0xed, 0xfc, 0x3e, 0x31, 0x08, 0xac, 0x3d, 0xcf, 0xf7, 0x53, 0x3f,
            0xb8, 0x1e, 0x45, 0x3f, 0xe7, 0xfb, 0x69, 0x3f, 0x35, 0x5e, 0xba, 0x3e,
            0x93, 0x18, 0xc4, 0x3e, 0xe9, 0x26, 0xf1, 0x3e, 0x7d, 0x3f, 0xb5, 0x3e,
            0x60, 0xe5, 0x10, 0x3f, 0x62, 0x10, 0x78, 0x3f, 0xc1, 0xca, 0x61, 0x3f
        );

        private static readonly ImmutableArray<byte> SerializedFirstTransformNormals = ImmutableArray.Create<byte>
        (
            0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
            0x08, 0xac, 0x9c, 0x3e, 0x58, 0x39, 0x54, 0x3f, 0xc9, 0x76, 0xbe, 0x3e,
            0x19, 0x04, 0x56, 0x3f, 0xf6, 0x28, 0x3c, 0x3f, 0xa0, 0x1a, 0xef, 0x3e,
            0x3f, 0x35, 0x1e, 0x3f, 0x25, 0x06, 0x61, 0x3f, 0x19, 0x04, 0x56, 0x3f,
            0x17, 0xd9, 0xce, 0x3e, 0x56, 0x0e, 0x2d, 0x3f, 0xd1, 0x22, 0x1b, 0x3f,
            0xe7, 0xfb, 0xa9, 0x3e, 0x29, 0x5c, 0x6f, 0x3f, 0xd7, 0xa3, 0x70, 0x3e,
            0xfc, 0xa9, 0x71, 0x3e, 0xe7, 0xfb, 0x29, 0x3f, 0x1f, 0x85, 0xab, 0x3e,
            0x60, 0xe5, 0x10, 0x3f, 0xc1, 0xca, 0xe1, 0x3e, 0x48, 0xe1, 0xba, 0x3e,
            0xa6, 0x9b, 0xc4, 0x3e, 0x8d, 0x97, 0x2e, 0x3f, 0x58, 0x39, 0x34, 0x3d,
            0x7f, 0x6a, 0x5c, 0x3f, 0xcd, 0xcc, 0x2c, 0x3f, 0x33, 0x33, 0xf3, 0x3e
        );

        private static readonly ImmutableArray<byte> SerializedFirstTransformTangents = ImmutableArray.Create<byte>
        (
            0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
            0x31, 0x08, 0xac, 0x3e, 0xf4, 0xfd, 0x14, 0x3f, 0xee, 0x7c, 0x7f, 0x3f,
            0xd3, 0x4d, 0x02, 0x3f, 0x31, 0x08, 0xac, 0x3d, 0x52, 0xb8, 0x9e, 0x3e,
            0x56, 0x0e, 0x2d, 0x3f, 0xf6, 0x28, 0x9c, 0x3e, 0x1f, 0x85, 0x4b, 0x3f,
            0xd1, 0x22, 0x9b, 0x3e, 0x91, 0xed, 0x1c, 0x3f, 0x6a, 0xbc, 0x34, 0x3f,
            0x77, 0xbe, 0x1f, 0x3d, 0xd3, 0x4d, 0xe2, 0x3e, 0xee, 0x7c, 0x3f, 0x3f,
            0xd7, 0xa3, 0xf0, 0x3e, 0xf2, 0xd2, 0x4d, 0x3e, 0x44, 0x8b, 0xac, 0x3e,
            0xb0, 0x72, 0x28, 0x3f, 0x3b, 0xdf, 0x8f, 0x3e, 0xfa, 0x7e, 0xea, 0x3e,
            0x5c, 0x8f, 0xc2, 0x3e, 0xf0, 0xa7, 0x46, 0x3f, 0x04, 0x56, 0x0e, 0x3f,
            0x25, 0x06, 0x41, 0x3f, 0xbc, 0x74, 0x13, 0x3c, 0xfe, 0xd4, 0x38, 0x3f
        );

        private static readonly ImmutableArray<byte> SerializedFirstTransformBitangents = ImmutableArray.Create<byte>
        (
            0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
            0x1b, 0x2f, 0xdd, 0x3e, 0xd3, 0x4d, 0xa2, 0x3e, 0x9a, 0x99, 0x39, 0x3f,
            0x93, 0x18, 0x04, 0x3f, 0xb2, 0x9d, 0x4f, 0x3f, 0x04, 0x56, 0x6e, 0x3f,
            0x1f, 0x85, 0xeb, 0x3d, 0xf4, 0xfd, 0x34, 0x3f, 0x54, 0xe3, 0x65, 0x3f,
            0x3d, 0x0a, 0xd7, 0x3d, 0xcb, 0xa1, 0x85, 0x3e, 0xec, 0x51, 0x78, 0x3f,
            0x31, 0x08, 0xac, 0x3e, 0x9c, 0xc4, 0xe0, 0x3e, 0xe3, 0xa5, 0x1b, 0x3d,
            0xcf, 0xf7, 0x33, 0x3f, 0x50, 0x8d, 0x37, 0x3f, 0x37, 0x89, 0x81, 0x3e,
            0xac, 0x1c, 0x5a, 0x3e, 0xb4, 0xc8, 0xb6, 0x3e, 0xbe, 0x9f, 0x1a, 0x3e,
            0xa6, 0x9b, 0xc4, 0x3c, 0xc9, 0x76, 0x3e, 0x3e, 0x29, 0x5c, 0x0f, 0x3f,
            0x2d, 0xb2, 0x9d, 0x3d, 0x3b, 0xdf, 0x2f, 0x3f, 0x4e, 0x62, 0x10, 0x3f
        );

        private static readonly ImmutableArray<byte> SerializedSecondTransformPositions = ImmutableArray.Create<byte>
        (
            0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
            0x98, 0x6e, 0x12, 0x3e, 0x31, 0x08, 0x2c, 0x3f, 0xc9, 0x76, 0x1e, 0x3f,
            0xd5, 0x78, 0xe9, 0x3e, 0xc9, 0x76, 0x1e, 0x3f, 0xc3, 0xf5, 0x28, 0x3e,
            0x60, 0xe5, 0x50, 0x3f, 0x52, 0xb8, 0x1e, 0x3e, 0x66, 0x66, 0x06, 0x3f,
            0xe1, 0x7a, 0xd4, 0x3e, 0x96, 0x43, 0x0b, 0x3e, 0xf4, 0xfd, 0x14, 0x3f,
            0xb0, 0x72, 0x28, 0x3f, 0x77, 0xbe, 0x1f, 0x3e, 0x4a, 0x0c, 0x02, 0x3e,
            0x7b, 0x14, 0x6e, 0x3f, 0x02, 0x2b, 0x67, 0x3f, 0x1b, 0x2f, 0x9d, 0x3e,
            0x1f, 0x85, 0xab, 0x3e, 0x68, 0x91, 0x2d, 0x3f, 0x50, 0x8d, 0x57, 0x3f,
            0x79, 0xe9, 0x06, 0x3f, 0xe1, 0x7a, 0x14, 0x3e, 0x8b, 0x6c, 0x27, 0x3f,
            0xd9, 0xce, 0x17, 0x3f, 0xae, 0x47, 0x41, 0x3f, 0x81, 0x95, 0xc3, 0x3e
        );

        private static readonly ImmutableArray<byte> SerializedSecondTransformNormals = ImmutableArray.Create<byte>
        (
            0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
            0x79, 0xe9, 0x06, 0x3f, 0x9a, 0x99, 0x59, 0x3f, 0x48, 0xe1, 0xba, 0x3e,
            0x19, 0x04, 0x16, 0x3f, 0x0e, 0x2d, 0x32, 0x3e, 0xae, 0x47, 0x61, 0x3e,
            0xee, 0x7c, 0x3f, 0x3f, 0x8f, 0xc2, 0x75, 0x3d, 0x71, 0x3d, 0x6a, 0x3f,
            0x39, 0xb4, 0x08, 0x3f, 0x4c, 0x37, 0x09, 0x3f, 0x12, 0x83, 0x40, 0x3f,
            0xe1, 0x7a, 0x94, 0x3e, 0x19, 0x04, 0x56, 0x3e, 0x21, 0xb0, 0x12, 0x3f,
            0x5a, 0x64, 0xfb, 0x3e, 0xec, 0x51, 0xb8, 0x3e, 0x3d, 0x0a, 0xd7, 0x3e,
            0xe5, 0xd0, 0xa2, 0x3e, 0xf4, 0xfd, 0x54, 0x3f, 0xe7, 0xfb, 0x29, 0x3f,
            0x3f, 0x35, 0x1e, 0x3f, 0xb4, 0xc8, 0x76, 0x3f, 0xb8, 0x1e, 0x85, 0x3d,
            0x35, 0x5e, 0x3a, 0x3e, 0x75, 0x93, 0x18, 0x3e, 0x79, 0xe9, 0x26, 0x3e
        );

        private static readonly ImmutableArray<byte> SerializedSecondTransformTangents = ImmutableArray.Create<byte>
        (
            0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
            0x73, 0x68, 0x31, 0x3f, 0x21, 0xb0, 0xf2, 0x3e, 0x3b, 0xdf, 0x8f, 0x3e,
            0x37, 0x89, 0x81, 0x3e, 0xc7, 0x4b, 0x57, 0x3f, 0x87, 0x16, 0xd9, 0x3d,
            0xd5, 0x78, 0x29, 0x3f, 0x58, 0x39, 0x34, 0x3c, 0xcd, 0xcc, 0xcc, 0x3e,
            0x83, 0xc0, 0x0a, 0x3f, 0xdf, 0x4f, 0x8d, 0x3e, 0xfc, 0xa9, 0xf1, 0x3e,
            0x8d, 0x97, 0xae, 0x3e, 0x66, 0x66, 0x46, 0x3f, 0xf4, 0xfd, 0x54, 0x3e,
            0xc5, 0x20, 0x50, 0x3f, 0x27, 0x31, 0xc8, 0x3e, 0x2f, 0xdd, 0x04, 0x3f,
            0x17, 0xd9, 0x8e, 0x3e, 0xf6, 0x28, 0x3c, 0x3f, 0xf4, 0xfd, 0x54, 0x3e,
            0x3d, 0x0a, 0x57, 0x3f, 0xe7, 0xfb, 0x29, 0x3e, 0xcf, 0xf7, 0x53, 0x3f,
            0xf2, 0xd2, 0x2d, 0x3f, 0x71, 0x3d, 0x6a, 0x3f, 0x9a, 0x99, 0x79, 0x3f
        );

        private static readonly ImmutableArray<byte> SerializedSecondTransformBitangents = ImmutableArray.Create<byte>
        (
            0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
            0x02, 0x2b, 0x07, 0x3f, 0x60, 0xe5, 0xd0, 0x3d, 0x29, 0x5c, 0x0f, 0x3d,
            0x2b, 0x87, 0x16, 0x3f, 0x37, 0x89, 0x21, 0x3f, 0xf0, 0xa7, 0xc6, 0x3e,
            0x5e, 0xba, 0x09, 0x3f, 0xb4, 0xc8, 0x56, 0x3f, 0x83, 0xc0, 0x6a, 0x3f,
            0x5a, 0x64, 0xbb, 0x3e, 0xba, 0x49, 0x0c, 0x3e, 0xb4, 0xc8, 0x76, 0x3f,
            0x1f, 0x85, 0x4b, 0x3f, 0x6d, 0xe7, 0x5b, 0x3f, 0xcf, 0xf7, 0xd3, 0x3e,
            0x71, 0x3d, 0x0a, 0x3e, 0xf6, 0x28, 0x9c, 0x3e, 0x98, 0x6e, 0x72, 0x3f,
            0x06, 0x81, 0x95, 0x3e, 0xba, 0x49, 0x6c, 0x3f, 0x0a, 0xd7, 0x03, 0x3f,
            0x1d, 0x5a, 0xe4, 0x3e, 0x4c, 0x37, 0x69, 0x3f, 0xe1, 0x7a, 0x34, 0x3f,
            0xc3, 0xf5, 0x28, 0x3e, 0xe9, 0x26, 0xb1, 0x3e, 0x5a, 0x64, 0x3b, 0x3e
        );

        private static readonly ImmutableArray<byte> SerializedTextureMaps = ImmutableArray.Create<byte>
        (
            // Quantity.
            3,

            // Identifiers.
            0x7b, 0x82, 0x43, 0xf1, 0x28, 0x9c, 0x4f, 0x29, 0x85, 0xcd, 0xf4, 0x61, 0xea, 0x3f, 0x7a, 0xc7,
            0xd6, 0x12, 0xd2, 0xaf, 0x79, 0x8a, 0x4e, 0x66, 0x89, 0x36, 0x12, 0xfc, 0x61, 0xfc, 0xa7, 0xe3,
            0x74, 0x84, 0xe4, 0xfb, 0x88, 0xfb, 0x48, 0xca, 0xaa, 0x57, 0xbe, 0x16, 0xcb, 0x2a, 0xdb, 0xf5,

            // Coordinates.
            0x1b, 0x2f, 0x5d, 0x3e, 0x3d, 0x0a, 0xd7, 0x3e,
            0x42, 0x60, 0x65, 0x3f, 0x5c, 0x8f, 0x42, 0x3f,
            0x02, 0x2b, 0x07, 0x3f, 0xbc, 0x74, 0x13, 0x3c,
            0x3d, 0x0a, 0x17, 0x3f, 0x21, 0xb0, 0x32, 0x3f,
            0xc9, 0x76, 0xfe, 0x3e, 0xbc, 0x74, 0x53, 0x3f,
            0x1b, 0x2f, 0x3d, 0x3f, 0x37, 0x89, 0x81, 0x3e,
            0x4e, 0x62, 0x70, 0x3f, 0x4c, 0x37, 0x69, 0x3f,
            0xd3, 0x4d, 0xe2, 0x3e, 0x5c, 0x8f, 0xc2, 0x3e,
            0x56, 0x0e, 0xad, 0x3e, 0x9a, 0x99, 0x39, 0x3f,
            0xb0, 0x72, 0xe8, 0x3e, 0xdb, 0xf9, 0x1e, 0x3f,

            0x6d, 0xe7, 0xbb, 0x3e, 0x77, 0xbe, 0x1f, 0x3d,
            0xcf, 0xf7, 0x33, 0x3f, 0x1b, 0x2f, 0x5d, 0x3f,
            0x75, 0x93, 0x18, 0x3f, 0x0a, 0xd7, 0x23, 0x3f,
            0x9a, 0x99, 0x59, 0x3f, 0x50, 0x8d, 0x97, 0x3e,
            0x56, 0x0e, 0xed, 0x3e, 0xb4, 0xc8, 0xb6, 0x3e,
            0x7d, 0x3f, 0x35, 0x3f, 0xc5, 0x20, 0x50, 0x3f,
            0xa4, 0x70, 0x1d, 0x3f, 0xf6, 0x28, 0x5c, 0x3f,
            0xfa, 0x7e, 0x0a, 0x3f, 0xd7, 0xa3, 0x50, 0x3f,
            0x9a, 0x99, 0x99, 0x3d, 0x79, 0xe9, 0xa6, 0x3e,
            0x42, 0x60, 0x45, 0x3f, 0x42, 0x60, 0x25, 0x3f,

            0xe7, 0xfb, 0xa9, 0x3e, 0xbc, 0x74, 0x13, 0x3c,
            0x56, 0x0e, 0x6d, 0x3f, 0x54, 0xe3, 0x45, 0x3f,
            0xb8, 0x1e, 0x45, 0x3f, 0xc5, 0x20, 0x30, 0x3e,
            0x5e, 0xba, 0xc9, 0x3e, 0xe9, 0x26, 0x51, 0x3f,
            0xfc, 0xa9, 0xf1, 0x3d, 0x0a, 0xd7, 0x43, 0x3f,
            0xba, 0x49, 0x0c, 0x3e, 0xdd, 0x24, 0x46, 0x3f,
            0x9c, 0xc4, 0xe0, 0x3e, 0x12, 0x83, 0x80, 0x3e,
            0x29, 0x5c, 0x0f, 0x3f, 0xcf, 0xf7, 0x53, 0x3e,
            0xcd, 0xcc, 0xcc, 0x3d, 0x5e, 0xba, 0x09, 0x3f,
            0xdd, 0x24, 0x46, 0x3f, 0xa8, 0xc6, 0xcb, 0x3e
        );

        private static readonly ImmutableArray<byte> SerializedColorLayers = ImmutableArray.Create<byte>
        (
            // Quantity.
            4,

            // Identifiers.
            0x4a, 0x17, 0xb3, 0x86, 0x94, 0x49, 0x4c, 0x7b, 0x83, 0x79, 0x36, 0xf0, 0x06, 0xfc, 0x79, 0xa7,
            0x78, 0xa0, 0x61, 0x62, 0x12, 0xc3, 0x49, 0xb6, 0xa4, 0xd4, 0xb2, 0xb2, 0x20, 0x1e, 0x0f, 0xd4,
            0xcf, 0xf5, 0xa7, 0x0f, 0xf3, 0x45, 0x44, 0x9a, 0xb8, 0xe5, 0x2f, 0xff, 0xc4, 0x10, 0x13, 0xbe,
            0x1f, 0x4b, 0xcf, 0x41, 0xd3, 0x52, 0x4f, 0x2a, 0x95, 0xfd, 0x65, 0x44, 0xd3, 0xf8, 0x81, 0x49,

            // Colors.
            0x21, 0x0f, 0xb3, 0x82,
            0x9f, 0x5f, 0x1e, 0xa1,
            0x93, 0x20, 0x56, 0xa6,
            0x55, 0xaf, 0x03, 0xef,
            0xc3, 0x54, 0x9a, 0xcf,
            0x38, 0x1e, 0xc9, 0x64,
            0x9f, 0x43, 0x9b, 0x58,
            0xa3, 0x6a, 0xa0, 0xb3,
            0x05, 0x7b, 0x65, 0xb0,
            0xf6, 0xd0, 0x6b, 0x07,

            0x48, 0x28, 0x6e, 0xd7,
            0x60, 0x22, 0x44, 0xa3,
            0xe6, 0xf7, 0x67, 0x15,
            0xc9, 0x90, 0xcf, 0xa1,
            0x1d, 0x65, 0x49, 0xda,
            0x5a, 0xa4, 0xb8, 0x95,
            0xe5, 0xad, 0x04, 0xc4,
            0x53, 0x7e, 0xbe, 0x69,
            0xba, 0xdb, 0x77, 0xd9,
            0x69, 0xd5, 0xd8, 0xaf,

            0x22, 0xb7, 0x09, 0x2d,
            0xe1, 0xf7, 0x61, 0xd7,
            0x13, 0xeb, 0x52, 0x24,
            0x6a, 0x92, 0x54, 0xf4,
            0x8a, 0x67, 0xba, 0xb5,
            0x65, 0x77, 0x96, 0x93,
            0xc6, 0xae, 0xcd, 0x65,
            0x76, 0xff, 0x88, 0xcc,
            0x70, 0xbd, 0x51, 0xb8,
            0x8a, 0xa0, 0xfd, 0xf5,

            0x19, 0x46, 0x43, 0xa9,
            0xd8, 0x8c, 0xa1, 0xfc,
            0x4b, 0x7b, 0xda, 0x9e,
            0x57, 0x36, 0x4a, 0xbd,
            0x7b, 0xc5, 0x3f, 0x9a,
            0x70, 0xbd, 0xaa, 0x61,
            0x5d, 0xa1, 0xaa, 0x4a,
            0x00, 0xc8, 0xff, 0x19,
            0xb8, 0xdb, 0x9c, 0x30,
            0x41, 0xbf, 0x77, 0xc6
        );

#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously
        private static async IAsyncEnumerable<byte> ByteSequence(params IEnumerable<byte>[] bytes)
#pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously
        {
            foreach (var set in bytes)
            {
                foreach (var b in set)
                {
                    yield return b;
                }
            }
        }

        private static async ValueTask Valid(Mesh mesh, params IEnumerable<byte>[] bytes)
        {
            var enumerable = new Mock<IAsyncEnumerable<byte>>();
            var enumerator = ByteSequence(bytes).GetAsyncEnumerator();
            enumerable.Setup(e => e.GetAsyncEnumerator(default)).Returns(enumerator);
            var meshDeserializer = new MeshDeserializer();

            var actual = await meshDeserializer.Deserialize(enumerable.Object);

            Assert.AreEqual(mesh, actual);
            enumerable.Verify(e => e.GetAsyncEnumerator(default), Times.Once);
            enumerable.VerifyNoOtherCalls();
        }

        private static async ValueTask Invalid(string message, params IEnumerable<byte>[] bytes)
        {
            var enumerable = new Mock<IAsyncEnumerable<byte>>();
            var enumerator = ByteSequence(bytes).GetAsyncEnumerator();
            enumerable.Setup(e => e.GetAsyncEnumerator(default)).Returns(enumerator);
            var meshDeserializer = new MeshDeserializer();

            try
            {
                _ = await meshDeserializer.Deserialize(enumerable.Object);
                Assert.Fail();
            }
            catch (InvalidDataException exception)
            {
                Assert.IsNull(exception.InnerException);
                Assert.AreEqual(message, exception.Message);
            }

            enumerable.Verify(e => e.GetAsyncEnumerator(default), Times.Once);
            enumerable.VerifyNoOtherCalls();
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenBytesNull()
        {
            var meshDeserializer = new MeshDeserializer();

            try
            {
                await meshDeserializer.Deserialize(null!);
                Assert.Fail();
            }
            catch (ArgumentNullException exception)
            {
                Assert.IsNull(exception.InnerException);
                Assert.AreEqual("Value cannot be null. (Parameter 'bytes')", exception.Message);
                Assert.AreEqual("bytes", exception.ParamName);
            }
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenBytesEmpty()
        {
            await Invalid("Unexpected EOF during mesh feature flags.");
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenUnexpectedBitASetInFeatureFlags()
        {
            await Invalid
            (
                "Unexpected mesh feature flags.",
                new byte[]
                {
                    8,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenUnexpectedBitBSetInFeatureFlags()
        {
            await Invalid
            (
                "Unexpected mesh feature flags.",
                new byte[]
                {
                    23,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenZeroVertices()
        {
            await Invalid
            (
                "Mesh has no vertices.",
                new byte[]
                {
                    7,
                    0, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenInterruptedBeforeNumberOfVertices()
        {
            await Invalid
            (
                "Unexpected EOF during number of vertices in mesh.",
                new byte[]
                {
                    7,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenInterruptedDuringNumberOfVertices()
        {
            await Invalid
            (
                "Unexpected EOF during number of vertices in mesh.",
                new byte[]
                {
                    7,
                    34
                }
            );
        }

        [TestMethod]
        public async Task ExposesGivenDataWithAllOptionalElementsNull()
        {
            await Valid
            (
                new Mesh
                (
                    MeshTests.Transforms,
                    MeshTests.FirstTransformIndices,
                    MeshTests.FirstTransformPositions,
                    null,
                    null,
                    null,
                    MeshTests.SecondTransformIndices,
                    MeshTests.SecondTransformPositions,
                    null,
                    null,
                    null,
                    MeshTests.TransformBlendFactors,
                    MeshTests.TextureCoordinates,
                    MeshTests.Colors,
                    MeshTests.Indices
                ),
                new byte[] { 0, 10, 0 },
                SerializedTransforms,
                FirstTransformIndices,
                SerializedFirstTransformPositions,
                SecondTransformIndices,
                SerializedSecondTransformPositions,
                MeshTests.TransformBlendFactors,
                SerializedTextureMaps,
                SerializedColorLayers,
                MeshTests.SerializedIndices
            );
        }

        [TestMethod]
        public async Task ExposesGivenDataWithNormals()
        {
            await Valid
            (
                new Mesh
                (
                    MeshTests.Transforms,
                    MeshTests.FirstTransformIndices,
                    MeshTests.FirstTransformPositions,
                    MeshTests.FirstTransformNormals,
                    null,
                    null,
                    MeshTests.SecondTransformIndices,
                    MeshTests.SecondTransformPositions,
                    MeshTests.SecondTransformNormals,
                    null,
                    null,
                    MeshTests.TransformBlendFactors,
                    MeshTests.TextureCoordinates,
                    MeshTests.Colors,
                    MeshTests.Indices
                ),
                new byte[] { 1, 10, 0 },
                SerializedTransforms,
                FirstTransformIndices,
                SerializedFirstTransformPositions,
                SerializedFirstTransformNormals,
                SecondTransformIndices,
                SerializedSecondTransformPositions,
                SerializedSecondTransformNormals,
                MeshTests.TransformBlendFactors,
                SerializedTextureMaps,
                SerializedColorLayers,
                MeshTests.SerializedIndices
            );
        }

        [TestMethod]
        public async Task ExposesGivenDataWithTangents()
        {
            await Valid
            (
                new Mesh
                (
                    MeshTests.Transforms,
                    MeshTests.FirstTransformIndices,
                    MeshTests.FirstTransformPositions,
                    null,
                    MeshTests.FirstTransformTangents,
                    null,
                    MeshTests.SecondTransformIndices,
                    MeshTests.SecondTransformPositions,
                    null,
                    MeshTests.SecondTransformTangents,
                    null,
                    MeshTests.TransformBlendFactors,
                    MeshTests.TextureCoordinates,
                    MeshTests.Colors,
                    MeshTests.Indices
                ),
                new byte[] { 2, 10, 0 },
                SerializedTransforms,
                FirstTransformIndices,
                SerializedFirstTransformPositions,
                SerializedFirstTransformTangents,
                SecondTransformIndices,
                SerializedSecondTransformPositions,
                SerializedSecondTransformTangents,
                MeshTests.TransformBlendFactors,
                SerializedTextureMaps,
                SerializedColorLayers,
                MeshTests.SerializedIndices
            );
        }

        [TestMethod]
        public async Task ExposesGivenDataWithBitangents()
        {
            await Valid
            (
                new Mesh
                (
                    MeshTests.Transforms,
                    MeshTests.FirstTransformIndices,
                    MeshTests.FirstTransformPositions,
                    null,
                    null,
                    MeshTests.FirstTransformBitangents,
                    MeshTests.SecondTransformIndices,
                    MeshTests.SecondTransformPositions,
                    null,
                    null,
                    MeshTests.SecondTransformBitangents,
                    MeshTests.TransformBlendFactors,
                    MeshTests.TextureCoordinates,
                    MeshTests.Colors,
                    MeshTests.Indices
                ),
                new byte[] { 4, 10, 0 },
                SerializedTransforms,
                FirstTransformIndices,
                SerializedFirstTransformPositions,
                SerializedFirstTransformBitangents,
                SecondTransformIndices,
                SerializedSecondTransformPositions,
                SerializedSecondTransformBitangents,
                MeshTests.TransformBlendFactors,
                SerializedTextureMaps,
                SerializedColorLayers,
                MeshTests.SerializedIndices
            );
        }

        [TestMethod]
        public async Task ExposesGivenDataWithAllOptionalFields()
        {
            await Valid
            (
                new Mesh
                (
                    MeshTests.Transforms,
                    MeshTests.FirstTransformIndices,
                    MeshTests.FirstTransformPositions,
                    MeshTests.FirstTransformNormals,
                    MeshTests.FirstTransformTangents,
                    MeshTests.FirstTransformBitangents,
                    MeshTests.SecondTransformIndices,
                    MeshTests.SecondTransformPositions,
                    MeshTests.SecondTransformNormals,
                    MeshTests.SecondTransformTangents,
                    MeshTests.SecondTransformBitangents,
                    MeshTests.TransformBlendFactors,
                    MeshTests.TextureCoordinates,
                    MeshTests.Colors,
                    MeshTests.Indices
                ),
                new byte[] { 7, 10, 0 },
                SerializedTransforms,
                FirstTransformIndices,
                SerializedFirstTransformPositions,
                SerializedFirstTransformNormals,
                SerializedFirstTransformTangents,
                SerializedFirstTransformBitangents,
                SecondTransformIndices,
                SerializedSecondTransformPositions,
                SerializedSecondTransformNormals,
                SerializedSecondTransformTangents,
                SerializedSecondTransformBitangents,
                MeshTests.TransformBlendFactors,
                SerializedTextureMaps,
                SerializedColorLayers,
                MeshTests.SerializedIndices
            );
        }

        [TestMethod]
        public async Task AllowsSmallDatasets()
        {
            await Valid
            (
                new Mesh
                (
                    ImmutableSortedSet.Create(new Guid("63b7815c-0070-446f-923d-2e11e99bf75d")),
                    ImmutableArray.Create<byte>(0),
                    ImmutableArray.Create(new Vector3(0.693f, 0.761f, 0.993f)),
                    ImmutableArray.Create(new Vector3(0.241f, 0.896f, 0.192f)),
                    ImmutableArray.Create(new Vector3(0.074f, 0.760f, 0.976f)),
                    ImmutableArray.Create(new Vector3(0.694f, 0.620f, 0.305f)),
                    ImmutableArray.Create<byte>(0),
                    ImmutableArray.Create(new Vector3(0.799f, 0.067f, 0.479f)),
                    ImmutableArray.Create(new Vector3(0.422f, 0.542f, 0.298f)),
                    ImmutableArray.Create(new Vector3(0.030f, 0.701f, 0.086f)),
                    ImmutableArray.Create(new Vector3(0.132f, 0.704f, 0.945f)),
                    ImmutableArray.Create<byte>(177),
                    ImmutableSortedDictionary<Guid, ImmutableArray<Vector2>>.Empty,
                    ImmutableSortedDictionary<Guid, ImmutableArray<ColorWithOpacity>>.Empty,
                    ImmutableArray.Create<ushort>(0, 0, 0)
                ),
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenFirstTransformPositionsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during first transform positions in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenFirstTransformNormalsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during first transform normals in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenFirstTransformTangentsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during first transform tangents in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenFirstTransformBitangentsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during first transform bitangents in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSecondTransformPositionsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during second transform positions in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSecondTransformNormalsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during second transform normals in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSecondTransformTangentssInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during second transform tangents in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSecondTransformBitangentsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during second transform bitangents in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenNumberOfTextureMapsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during number of texture maps in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenTextureMapIdentifiersInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during texture map identifiers in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    4,
                    0x92, 0xc9, 0xb4, 0x31, 0x21, 0x36, 0x7f, 0xdd, 0x49, 0xde, 0xad, 0x00, 0x88, 0x0d, 0xa5, 0x03,
                    0x2f, 0xd9, 0xf7, 0xcc, 0x35, 0x00, 0x1d, 0x3b, 0xc9, 0xff, 0x78, 0x78, 0x1f, 0x3f, 0x2c, 0xd9,
                    0xb8, 0xa4, 0xae, 0x87, 0x31, 0x67, 0x57, 0x1f, 
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenTextureMapIdentifiersNotUnique()
        {
            await Invalid
            (
                "Duplicate texture map identifiers in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    4,
                    0x92, 0xc9, 0xb4, 0x31, 0x21, 0x36, 0x7f, 0xdd, 0x49, 0xde, 0xad, 0x00, 0x88, 0x0d, 0xa5, 0x03,
                    0x19, 0x6c, 0xeb, 0xfb, 0xcf, 0xe2, 0xe6, 0xde, 0x42, 0xe3, 0x5b, 0xea, 0x9f, 0x8b, 0xe4, 0x72,
                    0xb8, 0xa4, 0xae, 0x87, 0x31, 0x67, 0x57, 0x1f, 0xaa, 0x5c, 0x37, 0x31, 0xae, 0x94, 0xa5, 0x50,
                    0x19, 0x6c, 0xeb, 0xfb, 0xcf, 0xe2, 0xe6, 0xde, 0x42, 0xe3, 0x5b, 0xea, 0x9f, 0x8b, 0xe4, 0x72,
                    0xaf, 0xa8, 0xee, 0x0f, 0xcf, 0xfd, 0xf6, 0x7c,
                    0x5a, 0x3a, 0xa2, 0xdc, 0x4d, 0x11, 0xef, 0x63,
                    0xc6, 0xcc, 0x5a, 0x4f, 0x6c, 0xe8, 0x8f, 0x9d,
                    0x00, 0x46, 0x80, 0x48, 0x70, 0x3d, 0x23, 0x69,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenTextureCoordinatesInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during texture map coordinates in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    4,
                    0x92, 0xc9, 0xb4, 0x31, 0x21, 0x36, 0x7f, 0xdd, 0x49, 0xde, 0xad, 0x00, 0x88, 0x0d, 0xa5, 0x03,
                    0x2f, 0xd9, 0xf7, 0xcc, 0x35, 0x00, 0x1d, 0x3b, 0xc9, 0xff, 0x78, 0x78, 0x1f, 0x3f, 0x2c, 0xd9,
                    0xb8, 0xa4, 0xae, 0x87, 0x31, 0x67, 0x57, 0x1f, 0xaa, 0x5c, 0x37, 0x31, 0xae, 0x94, 0xa5, 0x50,
                    0x19, 0x6c, 0xeb, 0xfb, 0xcf, 0xe2, 0xe6, 0xde, 0x42, 0xe3, 0x5b, 0xea, 0x9f, 0x8b, 0xe4, 0x72,
                    0xaf, 0xa8, 0xee, 0x0f, 0xcf, 0xfd, 0xf6, 0x7c,
                    0x5a, 0x3a, 0xa2,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenNumberOfColorLayersInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during number of color layers in mesh.",
                new byte[]
                {
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenColorLayerIdentifiersInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during color layer identifiers in mesh.",
                new byte[]
                {
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                    5,
                    0x63, 0xa2, 0xf6, 0x26, 0xf9, 0xcf, 0x46, 0x9d, 0x92, 0x3b, 0x69, 0xdb, 0xb2, 0xed, 0x99, 0x82,
                    0xf6, 0x42, 0xed, 0x0f,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenColorLayerIdentifiersNotUnique()
        {
            await Invalid
            (
                "Duplicate color layer identifiers in mesh.",
                new byte[]
                {
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                    5,
                    0x63, 0xa2, 0xf6, 0x26, 0xf9, 0xcf, 0x46, 0x9d, 0x92, 0x3b, 0x69, 0xdb, 0xb2, 0xed, 0x99, 0x82,
                    0xf6, 0x42, 0xed, 0x0f, 0x65, 0xa0, 0x4e, 0xc9, 0xb0, 0x8a, 0x06, 0x5b, 0xf9, 0xd5, 0x7d, 0x2e,
                    0x49, 0x57, 0x5d, 0xe7, 0x81, 0x8b, 0x43, 0x3e, 0xad, 0x87, 0x39, 0xbe, 0xb9, 0xee, 0x95, 0xfd,
                    0xf6, 0x42, 0xed, 0x0f, 0x65, 0xa0, 0x4e, 0xc9, 0xb0, 0x8a, 0x06, 0x5b, 0xf9, 0xd5, 0x7d, 0x2e,
                    0x96, 0x8e, 0xa3, 0x81, 0x43, 0xf4, 0x40, 0xa1, 0x83, 0x34, 0xcb, 0xef, 0x23, 0x87, 0x8b, 0xa2,
                    0x0d, 0xcd, 0x60, 0x50,
                    0x2e, 0x28, 0x87, 0x86,
                    0x31, 0xd9, 0x0f, 0x0e,
                    0xac, 0x55, 0x95, 0xf0,
                    0x5c, 0xb2, 0x6d, 0x47,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenColorLayersInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during color layer content in mesh.",
                new byte[]
                {
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                    4,
                    0x63, 0xa2, 0xf6, 0x26, 0xf9, 0xcf, 0x46, 0x9d, 0x92, 0x3b, 0x69, 0xdb, 0xb2, 0xed, 0x99, 0x82,
                    0xf6, 0x42, 0xed, 0x0f, 0x65, 0xa0, 0x4e, 0xc9, 0xb0, 0x8a, 0x06, 0x5b, 0xf9, 0xd5, 0x7d, 0x2e,
                    0x49, 0x57, 0x5d, 0xe7, 0x81, 0x8b, 0x43, 0x3e, 0xad, 0x87, 0x39, 0xbe, 0xb9, 0xee, 0x95, 0xfd,
                    0x96, 0x8e, 0xa3, 0x81, 0x43, 0xf4, 0x40, 0xa1, 0x83, 0x34, 0xcb, 0xef, 0x23, 0x87, 0x8b, 0xa2,
                    0x0d, 0xcd, 0x60, 0x50,
                    0x2e, 0x28, 0x87, 0x86,
                    0x31, 0xd9,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenInterruptedBeforeNumberOfIndices()
        {
            await Invalid
            (
                "Unexpected EOF during number of indices in mesh.",
                new byte[]
                {
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                    0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenInterruptedDuringNumberOfIndices()
        {
            await Invalid
            (
                "Unexpected EOF during number of indices in mesh.",
                new byte[]
                {
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                    0,
                    37
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenZeroIndices()
        {
            await Invalid
            (
                "Mesh does not have at least three indices.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenOneIndex()
        {
            await Invalid
            (
                "Mesh does not have at least three indices.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    1, 0,
                    0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenTwoIndices()
        {
            await Invalid
            (
                "Mesh does not have at least three indices.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    2, 0,
                    0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenIndicesInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during indices in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenIndicesContainsIndexEqualToNumberOfVertices()
        {
            await Invalid
            (
                "Mesh index out of range.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 1, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenIndicesContainsIndexGreaterThanNumberOfVertices()
        {
            await Invalid
            (
                "Mesh index out of range.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 2, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenNumberOfTransformsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during number of transforms in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenZeroTransforms()
        {
            await Invalid
            (
                "Mesh has no transforms.",
                new byte[]
                {
                    7,
                    1, 0,
                    0,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenTransformIdentifiersInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during transform identifiers in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenTransformIdentifiersNotUnique()
        {
            await Invalid
            (
                "Duplicate transform identifiers in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    5,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0x2a, 0x94, 0xe0, 0xe0, 0xca, 0x0b, 0x42, 0xa1, 0xb6, 0xac, 0x37, 0x0f, 0x63, 0x5e, 0x44, 0x47,
                    0x7b, 0x3e, 0xbb, 0xf3, 0xd3, 0x48, 0x41, 0x8d, 0x9c, 0x04, 0xea, 0xa5, 0x46, 0x2d, 0x1a, 0x69,
                    0x2a, 0x94, 0xe0, 0xe0, 0xca, 0x0b, 0x42, 0xa1, 0xb6, 0xac, 0x37, 0x0f, 0x63, 0x5e, 0x44, 0x47,
                    0xce, 0x61, 0x1c, 0x7a, 0x1a, 0x83, 0x41, 0x5f, 0xa6, 0xc8, 0x20, 0xb5, 0x5c, 0x9a, 0x90, 0x1f,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenFirstTransformIndicesInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during first transform indices in mesh.",
                new byte[]
                {
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenFirstTransformIndicesContainsNumberOfTransforms()
        {
            await Invalid
            (
                "Mesh first transform index out of range.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    1,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenFirstTransformIndicesContainsValuesGreaterThanNumberOfTransforms()
        {
            await Invalid
            (
                "Mesh first transform index out of range.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    2,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSecondTransformIndicesInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during second transform indices in mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSecondTransformIndicesContainsNumberOfTransforms()
        {
            await Invalid
            (
                "Mesh second transform index out of range.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    1,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSecondTransformIndicesContainsValuesGreaterThanNumberOfTransforms()
        {
            await Invalid
            (
                "Mesh second transform index out of range.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    2,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenTransformBlendFactorsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during mesh transform blend factors.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenOneExcessByte()
        {
            await Invalid
            (
                "Unexpected bytes following mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                    37,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenTwoExcessBytes()
        {
            await Invalid
            (
                "Unexpected bytes following mesh.",
                new byte[]
                {
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                    37, 150,
                }
            );
        }
    }
}
