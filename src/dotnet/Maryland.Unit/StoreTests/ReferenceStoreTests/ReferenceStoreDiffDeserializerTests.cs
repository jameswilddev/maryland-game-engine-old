using Maryland.Stores.ReferenceStores;

namespace Maryland.Unit.StoreTests.ReferenceStoreTests
{
    [TestClass]
    public sealed class ReferenceStoreDiffDeserializerTests
    {
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously
        private static async IAsyncEnumerable<byte> CreateAsyncEnumerable(params byte[] bytes)
#pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously
        {
            foreach (var b in bytes)
            {
                yield return b;
            }
        }

        private static IAsyncEnumerator<byte> CreateAsyncEnumerator(params byte[] bytes)
        {

            return CreateAsyncEnumerable(bytes).GetAsyncEnumerator();
        }

        private static async Task AssertRemainingBytes(IAsyncEnumerator<byte> enumerator, params byte[] bytes)
        {
            var actual = new List<byte>();

            while (await enumerator.MoveNextAsync())
            {
                actual.Add(enumerator.Current);
            }

            CollectionAssert.AreEqual(bytes, actual);
        }

        private static async Task AssertThrowsException(string message, params byte[] bytes)
        {
            var input = CreateAsyncEnumerator(bytes);
            var referenceStoreDiffDeserializer = new ReferenceStoreDiffDeserializer();

            try
            {
                _ = await referenceStoreDiffDeserializer.Deserialize(input);
            }
            catch (InvalidDataException exception)
            {
                Assert.AreEqual(message, exception.Message);
                Assert.IsNull(exception.InnerException);
            }
        }

        [TestMethod]
        public async Task DeserializesValidFile()
        {
            var bytes = CreateAsyncEnumerator(
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71,
                2, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xa2, 0xb2, 0xb0, 0xfb, 0xd5, 0x0a, 0x4e, 0xb0, 0xbc, 0x63, 0x8f, 0x48, 0x12, 0x60, 0xe4, 0x3c,
                0xf6, 0xbd, 0x80, 0xcc, 0x16, 0xe0, 0x47, 0x8e, 0xa1, 0xb9, 0x2d, 0xdc, 0x9c, 0x6c, 0x4c, 0x0f,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x0c, 0xf2, 0x39, 0xfc, 0x55
            );
            var referenceStoreDiffDeserializer = new ReferenceStoreDiffDeserializer();

            var referenceStoreDiff = await referenceStoreDiffDeserializer.Deserialize(bytes);

            var entityA = new Guid("291bcdb8-9199-49b2-8dff-b8584934121e");
            var entityB = new Guid("d2b6790d-9fa2-4595-8100-d44cee52c696");
            var entityC = new Guid("f6bd80cc-16e0-478e-a1b9-2ddc9c6c4c0f");
            var attributeA = new Guid("b51793db-115e-43f6-843c-a8abef20f76c");
            var attributeB = new Guid("094717c7-d5ac-4801-bc23-bb706539c7db");
            var attributeC = new Guid("a2b2b0fb-d50a-4eb0-bc63-8f481260e43c");
            var valueAA = new Guid("47e69a06-bd8e-4ba2-8358-aba5350fe7af");
            var valueAB = new Guid("00b0787f-174c-4a7a-b226-735a6ca8474c");
            var valueBA = new Guid("2726bd2e-3216-48b8-9a87-b4b5facf6371");
            CollectionAssert.AreEquivalent
            (
                new[]
                {
                    new KeyValuePair<EntityAttributeIdentifierPair, Guid>(new EntityAttributeIdentifierPair(entityA, attributeA), valueAA),
                    new KeyValuePair<EntityAttributeIdentifierPair, Guid>(new EntityAttributeIdentifierPair(entityA, attributeB), valueAB),
                    new KeyValuePair<EntityAttributeIdentifierPair, Guid>(new EntityAttributeIdentifierPair(entityB, attributeA), valueBA),
                },
                referenceStoreDiff.Set
            );
            CollectionAssert.AreEquivalent
            (
                new[]
                {
                    new EntityAttributeIdentifierPair(entityA, attributeC),
                    new EntityAttributeIdentifierPair(entityC, attributeA),
                },
                referenceStoreDiff.Deleted
            );
            await AssertRemainingBytes(bytes, 0x0c, 0xf2, 0x39, 0xfc, 0x55);
        }

        [TestMethod]
        public async Task DeserializesValidFileWithEOF()
        {
            var bytes = CreateAsyncEnumerator(
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71,
                2, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xa2, 0xb2, 0xb0, 0xfb, 0xd5, 0x0a, 0x4e, 0xb0, 0xbc, 0x63, 0x8f, 0x48, 0x12, 0x60, 0xe4, 0x3c,
                0xf6, 0xbd, 0x80, 0xcc, 0x16, 0xe0, 0x47, 0x8e, 0xa1, 0xb9, 0x2d, 0xdc, 0x9c, 0x6c, 0x4c, 0x0f,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c
            );
            var referenceStoreDiffDeserializer = new ReferenceStoreDiffDeserializer();

            var referenceStoreDiff = await referenceStoreDiffDeserializer.Deserialize(bytes);

            var entityA = new Guid("291bcdb8-9199-49b2-8dff-b8584934121e");
            var entityB = new Guid("d2b6790d-9fa2-4595-8100-d44cee52c696");
            var entityC = new Guid("f6bd80cc-16e0-478e-a1b9-2ddc9c6c4c0f");
            var attributeA = new Guid("b51793db-115e-43f6-843c-a8abef20f76c");
            var attributeB = new Guid("094717c7-d5ac-4801-bc23-bb706539c7db");
            var attributeC = new Guid("a2b2b0fb-d50a-4eb0-bc63-8f481260e43c");
            var valueAA = new Guid("47e69a06-bd8e-4ba2-8358-aba5350fe7af");
            var valueAB = new Guid("00b0787f-174c-4a7a-b226-735a6ca8474c");
            var valueBA = new Guid("2726bd2e-3216-48b8-9a87-b4b5facf6371");
            CollectionAssert.AreEquivalent
            (
                new[]
                {
                    new KeyValuePair<EntityAttributeIdentifierPair, Guid>(new EntityAttributeIdentifierPair(entityA, attributeA), valueAA),
                    new KeyValuePair<EntityAttributeIdentifierPair, Guid>(new EntityAttributeIdentifierPair(entityA, attributeB), valueAB),
                    new KeyValuePair<EntityAttributeIdentifierPair, Guid>(new EntityAttributeIdentifierPair(entityB, attributeA), valueBA),
                },
                referenceStoreDiff.Set
            );
            CollectionAssert.AreEquivalent
            (
                new[]
                {
                    new EntityAttributeIdentifierPair(entityA, attributeC),
                    new EntityAttributeIdentifierPair(entityC, attributeA),
                },
                referenceStoreDiff.Deleted
            );
            await AssertRemainingBytes(bytes);
        }

        [TestMethod]
        public async Task ThrowsWhenFileIsEmpty()
        {
            await AssertThrowsException("Unexpected end of file during the number of references set.");
        }

        [TestMethod]
        public async Task ThrowsWhenFileContainsOnlyOneByte()
        {
            await AssertThrowsException("Unexpected end of file during the number of references set.", 3);
        }

        [TestMethod]
        public async Task ThrowsWhenFileContainsOnlyTwoBytes()
        {
            await AssertThrowsException("Unexpected end of file during the number of references set.", 3, 0);
        }

        [TestMethod]
        public async Task ThrowsWhenFileContainsOnlyThreeBytes()
        {
            await AssertThrowsException("Unexpected end of file during the number of references set.", 3, 0, 0);
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsBetweenSets()
        {
            await AssertThrowsException(
                "Unexpected end of file during the entity identifier of a set reference.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsDuringSetEntity()
        {
            await AssertThrowsException(
                "Unexpected end of file during the entity identifier of a set reference.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsBetweenSetEntityAndAttribute()
        {
            await AssertThrowsException(
                "Unexpected end of file during the attribute identifier of a set reference.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsDuringSetAttribute()
        {
            await AssertThrowsException(
                "Unexpected end of file during the attribute identifier of a set reference.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsBetweenSetAttributeAndValue()
        {
            await AssertThrowsException(
                "Unexpected end of file during the value identifier of a set reference.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsDuringSetValue()
        {
            await AssertThrowsException(
                "Unexpected end of file during the value identifier of a set reference.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsBetweenSetAndDeleted()
        {
            await AssertThrowsException(
                "Unexpected end of file during the number of deleted references.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsAfterFirstByteOfDeleted()
        {
            await AssertThrowsException(
                "Unexpected end of file during the number of deleted references.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71,
                4
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsAfterSecondByteOfDeleted()
        {
            await AssertThrowsException(
                "Unexpected end of file during the number of deleted references.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71,
                4, 0
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsAfterThirdByteOfDeleted()
        {
            await AssertThrowsException(
                "Unexpected end of file during the number of deleted references.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71,
                4, 0, 0
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsBetweenDeleted()
        {
            await AssertThrowsException(
                "Unexpected end of file during the entity identifier of a deleted reference.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71,
                2, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xa2, 0xb2, 0xb0, 0xfb, 0xd5, 0x0a, 0x4e, 0xb0, 0xbc, 0x63, 0x8f, 0x48, 0x12, 0x60, 0xe4, 0x3c
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsDuringDeletedEntity()
        {
            await AssertThrowsException(
                "Unexpected end of file during the entity identifier of a deleted reference.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71,
                2, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xa2, 0xb2, 0xb0, 0xfb, 0xd5, 0x0a, 0x4e, 0xb0, 0xbc, 0x63, 0x8f, 0x48, 0x12, 0x60, 0xe4, 0x3c,
                0xf6, 0xbd, 0x80, 0xcc, 0x16, 0xe0, 0x47, 0x8e
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsDuringBetweenEntityAndAttributeOfDeleted()
        {
            await AssertThrowsException(
                "Unexpected end of file during the attribute identifier of a deleted reference.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71,
                2, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xa2, 0xb2, 0xb0, 0xfb, 0xd5, 0x0a, 0x4e, 0xb0, 0xbc, 0x63, 0x8f, 0x48, 0x12, 0x60, 0xe4, 0x3c,
                0xf6, 0xbd, 0x80, 0xcc, 0x16, 0xe0, 0x47, 0x8e, 0xa1, 0xb9, 0x2d, 0xdc, 0x9c, 0x6c, 0x4c, 0x0f
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileEndsDuringDeletedAttribute()
        {
            await AssertThrowsException(
                "Unexpected end of file during the attribute identifier of a deleted reference.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71,
                2, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xa2, 0xb2, 0xb0, 0xfb, 0xd5, 0x0a, 0x4e, 0xb0, 0xbc, 0x63, 0x8f, 0x48, 0x12, 0x60, 0xe4, 0x3c,
                0xf6, 0xbd, 0x80, 0xcc, 0x16, 0xe0, 0x47, 0x8e, 0xa1, 0xb9, 0x2d, 0xdc, 0x9c, 0x6c, 0x4c, 0x0f,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileSetsSameIdentifierTwice()
        {
            await AssertThrowsException(
                "Multiple tags are specified for the same identifier.",
                4, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x6c, 0xbf, 0x27, 0x4b, 0xfa, 0xb8, 0x47, 0x22, 0x96, 0x79, 0x50, 0xaf, 0xb2, 0x63, 0x22, 0x60,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71,
                2, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xa2, 0xb2, 0xb0, 0xfb, 0xd5, 0x0a, 0x4e, 0xb0, 0xbc, 0x63, 0x8f, 0x48, 0x12, 0x60, 0xe4, 0x3c,
                0xf6, 0xbd, 0x80, 0xcc, 0x16, 0xe0, 0x47, 0x8e, 0xa1, 0xb9, 0x2d, 0xdc, 0x9c, 0x6c, 0x4c, 0x0f,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x0c, 0xf2, 0x39, 0xfc, 0x55
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileDeletesSetIdentifier()
        {
            await AssertThrowsException(
                "A reference is set, then deleted again.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71,
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xa2, 0xb2, 0xb0, 0xfb, 0xd5, 0x0a, 0x4e, 0xb0, 0xbc, 0x63, 0x8f, 0x48, 0x12, 0x60, 0xe4, 0x3c,
                0xf6, 0xbd, 0x80, 0xcc, 0x16, 0xe0, 0x47, 0x8e, 0xa1, 0xb9, 0x2d, 0xdc, 0x9c, 0x6c, 0x4c, 0x0f,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x0c, 0xf2, 0x39, 0xfc, 0x55
            );
        }

        [TestMethod]
        public async Task ThrowsWhenFileDeletesSameMappingTwice()
        {
            await AssertThrowsException(
                "The same reference is deleted multiple times.",
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x47, 0xe6, 0x9a, 0x06, 0xbd, 0x8e, 0x4b, 0xa2, 0x83, 0x58, 0xab, 0xa5, 0x35, 0x0f, 0xe7, 0xaf,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                0x09, 0x47, 0x17, 0xc7, 0xd5, 0xac, 0x48, 0x01, 0xbc, 0x23, 0xbb, 0x70, 0x65, 0x39, 0xc7, 0xdb,
                0x00, 0xb0, 0x78, 0x7f, 0x17, 0x4c, 0x4a, 0x7a, 0xb2, 0x26, 0x73, 0x5a, 0x6c, 0xa8, 0x47, 0x4c,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                0x27, 0x26, 0xbd, 0x2e, 0x32, 0x16, 0x48, 0xb8, 0x9a, 0x87, 0xb4, 0xb5, 0xfa, 0xcf, 0x63, 0x71,
                3, 0, 0, 0,
                0x53, 0x85, 0x74, 0xcd, 0x47, 0xd2, 0x4f, 0x0e, 0xa3, 0x50, 0x27, 0xca, 0xf6, 0xaf, 0xfa, 0xad,
                0x75, 0x9f, 0xdf, 0x11, 0x4e, 0xc8, 0x4d, 0x0b, 0xbc, 0x38, 0xb7, 0x09, 0xec, 0x5a, 0x07, 0x57,
                0xa2, 0xb2, 0xb0, 0xfb, 0xd5, 0x0a, 0x4e, 0xb0, 0xbc, 0x63, 0x8f, 0x48, 0x12, 0x60, 0xe4, 0x3c,
                0xf6, 0xbd, 0x80, 0xcc, 0x16, 0xe0, 0x47, 0x8e, 0xa1, 0xb9, 0x2d, 0xdc, 0x9c, 0x6c, 0x4c, 0x0f,
                0x53, 0x85, 0x74, 0xcd, 0x47, 0xd2, 0x4f, 0x0e, 0xa3, 0x50, 0x27, 0xca, 0xf6, 0xaf, 0xfa, 0xad,
                0x75, 0x9f, 0xdf, 0x11, 0x4e, 0xc8, 0x4d, 0x0b, 0xbc, 0x38, 0xb7, 0x09, 0xec, 0x5a, 0x07, 0x57,
                0x0c, 0xf2, 0x39, 0xfc, 0x55
            );
        }
    }
}
