using Maryland.DataTypes;
using Maryland.PatchInstructions;
using Maryland.Unit.DataTypes;
using Moq;
using System.Collections.Immutable;
using System.Numerics;

namespace Maryland.Unit.PatchInstructions
{
    [TestClass]
    public sealed class PatchInstructionDeserializerTests
    {
        private static readonly ImmutableArray<byte> MeshFirstTransformIndices = ImmutableArray.Create<byte>(3, 2, 1, 4, 3, 5, 0, 2, 1, 4);
        private static readonly ImmutableArray<byte> MeshSecondTransformIndices = ImmutableArray.Create<byte>(4, 2, 3, 1, 5, 2, 2, 3, 0, 3);

        private static readonly ImmutableArray<byte> MeshSerializedTransforms = ImmutableArray.Create<byte>
        (
            // Quantity.
            6,

            // Identifiers.
            0x7f, 0x9f, 0xcb, 0x78, 0x7a, 0x0f, 0x4a, 0x1c, 0xab, 0x2e, 0xc6, 0xe9, 0xcf, 0xd7, 0xe6, 0xdc,
            0xa1, 0x3e, 0xe5, 0x1b, 0x17, 0xcb, 0x47, 0x0d, 0x99, 0xf1, 0x08, 0x3d, 0x5f, 0xae, 0x52, 0x56,

            0x04, 0x5e, 0xca, 0x75, 0xc5, 0x7b, 0x45, 0xc9, 0xbb, 0x4f, 0x9b, 0x19, 0x6a, 0x8c, 0xa1, 0x42,
            0x34, 0x5b, 0xb8, 0x41, 0xed, 0x88, 0x40, 0x70, 0x8b, 0x46, 0x6f, 0x9d, 0x38, 0x21, 0xae, 0x2d,
            0x4e, 0xec, 0x95, 0x62, 0x85, 0x8a, 0x4c, 0x5f, 0xb3, 0x3b, 0xeb, 0x2f, 0xdc, 0xb3, 0x7b, 0x25,

            0xc3, 0x5a, 0x90, 0x15, 0x95, 0x00, 0x43, 0x31, 0xb5, 0xbf, 0x52, 0x51, 0x60, 0xdf, 0xe9, 0x18
        );

        private static readonly ImmutableArray<byte> MeshSerializedFirstTransformPositions = ImmutableArray.Create<byte>
        (
            0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
            0x19, 0x04, 0x16, 0x3f, 0x0c, 0x02, 0x6b, 0x3f, 0x37, 0x89, 0x41, 0x3e,
            0x06, 0x81, 0x95, 0x3d, 0x50, 0x8d, 0x37, 0x3f, 0x48, 0xe1, 0xba, 0x3e,
            0xaa, 0xf1, 0xd2, 0x3d, 0xf6, 0x28, 0xdc, 0x3e, 0xae, 0x47, 0x41, 0x3f,
            0x4a, 0x0c, 0x22, 0x3f, 0x21, 0xb0, 0x52, 0x3f, 0x50, 0x8d, 0x57, 0x3f,
            0x89, 0x41, 0x40, 0x3f, 0xcb, 0xa1, 0xc5, 0x3e, 0xd3, 0x4d, 0x42, 0x3f,
            0x91, 0xed, 0xfc, 0x3e, 0x31, 0x08, 0xac, 0x3d, 0xcf, 0xf7, 0x53, 0x3f,
            0xb8, 0x1e, 0x45, 0x3f, 0xe7, 0xfb, 0x69, 0x3f, 0x35, 0x5e, 0xba, 0x3e,
            0x93, 0x18, 0xc4, 0x3e, 0xe9, 0x26, 0xf1, 0x3e, 0x7d, 0x3f, 0xb5, 0x3e,
            0x60, 0xe5, 0x10, 0x3f, 0x62, 0x10, 0x78, 0x3f, 0xc1, 0xca, 0x61, 0x3f
        );

        private static readonly ImmutableArray<byte> MeshSerializedFirstTransformNormals = ImmutableArray.Create<byte>
        (
            0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
            0x08, 0xac, 0x9c, 0x3e, 0x58, 0x39, 0x54, 0x3f, 0xc9, 0x76, 0xbe, 0x3e,
            0x19, 0x04, 0x56, 0x3f, 0xf6, 0x28, 0x3c, 0x3f, 0xa0, 0x1a, 0xef, 0x3e,
            0x3f, 0x35, 0x1e, 0x3f, 0x25, 0x06, 0x61, 0x3f, 0x19, 0x04, 0x56, 0x3f,
            0x17, 0xd9, 0xce, 0x3e, 0x56, 0x0e, 0x2d, 0x3f, 0xd1, 0x22, 0x1b, 0x3f,
            0xe7, 0xfb, 0xa9, 0x3e, 0x29, 0x5c, 0x6f, 0x3f, 0xd7, 0xa3, 0x70, 0x3e,
            0xfc, 0xa9, 0x71, 0x3e, 0xe7, 0xfb, 0x29, 0x3f, 0x1f, 0x85, 0xab, 0x3e,
            0x60, 0xe5, 0x10, 0x3f, 0xc1, 0xca, 0xe1, 0x3e, 0x48, 0xe1, 0xba, 0x3e,
            0xa6, 0x9b, 0xc4, 0x3e, 0x8d, 0x97, 0x2e, 0x3f, 0x58, 0x39, 0x34, 0x3d,
            0x7f, 0x6a, 0x5c, 0x3f, 0xcd, 0xcc, 0x2c, 0x3f, 0x33, 0x33, 0xf3, 0x3e
        );

        private static readonly ImmutableArray<byte> MeshSerializedFirstTransformTangents = ImmutableArray.Create<byte>
        (
            0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
            0x31, 0x08, 0xac, 0x3e, 0xf4, 0xfd, 0x14, 0x3f, 0xee, 0x7c, 0x7f, 0x3f,
            0xd3, 0x4d, 0x02, 0x3f, 0x31, 0x08, 0xac, 0x3d, 0x52, 0xb8, 0x9e, 0x3e,
            0x56, 0x0e, 0x2d, 0x3f, 0xf6, 0x28, 0x9c, 0x3e, 0x1f, 0x85, 0x4b, 0x3f,
            0xd1, 0x22, 0x9b, 0x3e, 0x91, 0xed, 0x1c, 0x3f, 0x6a, 0xbc, 0x34, 0x3f,
            0x77, 0xbe, 0x1f, 0x3d, 0xd3, 0x4d, 0xe2, 0x3e, 0xee, 0x7c, 0x3f, 0x3f,
            0xd7, 0xa3, 0xf0, 0x3e, 0xf2, 0xd2, 0x4d, 0x3e, 0x44, 0x8b, 0xac, 0x3e,
            0xb0, 0x72, 0x28, 0x3f, 0x3b, 0xdf, 0x8f, 0x3e, 0xfa, 0x7e, 0xea, 0x3e,
            0x5c, 0x8f, 0xc2, 0x3e, 0xf0, 0xa7, 0x46, 0x3f, 0x04, 0x56, 0x0e, 0x3f,
            0x25, 0x06, 0x41, 0x3f, 0xbc, 0x74, 0x13, 0x3c, 0xfe, 0xd4, 0x38, 0x3f
        );

        private static readonly ImmutableArray<byte> MeshSerializedFirstTransformBitangents = ImmutableArray.Create<byte>
        (
            0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
            0x1b, 0x2f, 0xdd, 0x3e, 0xd3, 0x4d, 0xa2, 0x3e, 0x9a, 0x99, 0x39, 0x3f,
            0x93, 0x18, 0x04, 0x3f, 0xb2, 0x9d, 0x4f, 0x3f, 0x04, 0x56, 0x6e, 0x3f,
            0x1f, 0x85, 0xeb, 0x3d, 0xf4, 0xfd, 0x34, 0x3f, 0x54, 0xe3, 0x65, 0x3f,
            0x3d, 0x0a, 0xd7, 0x3d, 0xcb, 0xa1, 0x85, 0x3e, 0xec, 0x51, 0x78, 0x3f,
            0x31, 0x08, 0xac, 0x3e, 0x9c, 0xc4, 0xe0, 0x3e, 0xe3, 0xa5, 0x1b, 0x3d,
            0xcf, 0xf7, 0x33, 0x3f, 0x50, 0x8d, 0x37, 0x3f, 0x37, 0x89, 0x81, 0x3e,
            0xac, 0x1c, 0x5a, 0x3e, 0xb4, 0xc8, 0xb6, 0x3e, 0xbe, 0x9f, 0x1a, 0x3e,
            0xa6, 0x9b, 0xc4, 0x3c, 0xc9, 0x76, 0x3e, 0x3e, 0x29, 0x5c, 0x0f, 0x3f,
            0x2d, 0xb2, 0x9d, 0x3d, 0x3b, 0xdf, 0x2f, 0x3f, 0x4e, 0x62, 0x10, 0x3f
        );

        private static readonly ImmutableArray<byte> MeshSerializedSecondTransformPositions = ImmutableArray.Create<byte>
        (
            0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
            0x98, 0x6e, 0x12, 0x3e, 0x31, 0x08, 0x2c, 0x3f, 0xc9, 0x76, 0x1e, 0x3f,
            0xd5, 0x78, 0xe9, 0x3e, 0xc9, 0x76, 0x1e, 0x3f, 0xc3, 0xf5, 0x28, 0x3e,
            0x60, 0xe5, 0x50, 0x3f, 0x52, 0xb8, 0x1e, 0x3e, 0x66, 0x66, 0x06, 0x3f,
            0xe1, 0x7a, 0xd4, 0x3e, 0x96, 0x43, 0x0b, 0x3e, 0xf4, 0xfd, 0x14, 0x3f,
            0xb0, 0x72, 0x28, 0x3f, 0x77, 0xbe, 0x1f, 0x3e, 0x4a, 0x0c, 0x02, 0x3e,
            0x7b, 0x14, 0x6e, 0x3f, 0x02, 0x2b, 0x67, 0x3f, 0x1b, 0x2f, 0x9d, 0x3e,
            0x1f, 0x85, 0xab, 0x3e, 0x68, 0x91, 0x2d, 0x3f, 0x50, 0x8d, 0x57, 0x3f,
            0x79, 0xe9, 0x06, 0x3f, 0xe1, 0x7a, 0x14, 0x3e, 0x8b, 0x6c, 0x27, 0x3f,
            0xd9, 0xce, 0x17, 0x3f, 0xae, 0x47, 0x41, 0x3f, 0x81, 0x95, 0xc3, 0x3e
        );

        private static readonly ImmutableArray<byte> MeshSerializedSecondTransformNormals = ImmutableArray.Create<byte>
        (
            0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
            0x79, 0xe9, 0x06, 0x3f, 0x9a, 0x99, 0x59, 0x3f, 0x48, 0xe1, 0xba, 0x3e,
            0x19, 0x04, 0x16, 0x3f, 0x0e, 0x2d, 0x32, 0x3e, 0xae, 0x47, 0x61, 0x3e,
            0xee, 0x7c, 0x3f, 0x3f, 0x8f, 0xc2, 0x75, 0x3d, 0x71, 0x3d, 0x6a, 0x3f,
            0x39, 0xb4, 0x08, 0x3f, 0x4c, 0x37, 0x09, 0x3f, 0x12, 0x83, 0x40, 0x3f,
            0xe1, 0x7a, 0x94, 0x3e, 0x19, 0x04, 0x56, 0x3e, 0x21, 0xb0, 0x12, 0x3f,
            0x5a, 0x64, 0xfb, 0x3e, 0xec, 0x51, 0xb8, 0x3e, 0x3d, 0x0a, 0xd7, 0x3e,
            0xe5, 0xd0, 0xa2, 0x3e, 0xf4, 0xfd, 0x54, 0x3f, 0xe7, 0xfb, 0x29, 0x3f,
            0x3f, 0x35, 0x1e, 0x3f, 0xb4, 0xc8, 0x76, 0x3f, 0xb8, 0x1e, 0x85, 0x3d,
            0x35, 0x5e, 0x3a, 0x3e, 0x75, 0x93, 0x18, 0x3e, 0x79, 0xe9, 0x26, 0x3e
        );

        private static readonly ImmutableArray<byte> MeshSerializedSecondTransformTangents = ImmutableArray.Create<byte>
        (
            0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
            0x73, 0x68, 0x31, 0x3f, 0x21, 0xb0, 0xf2, 0x3e, 0x3b, 0xdf, 0x8f, 0x3e,
            0x37, 0x89, 0x81, 0x3e, 0xc7, 0x4b, 0x57, 0x3f, 0x87, 0x16, 0xd9, 0x3d,
            0xd5, 0x78, 0x29, 0x3f, 0x58, 0x39, 0x34, 0x3c, 0xcd, 0xcc, 0xcc, 0x3e,
            0x83, 0xc0, 0x0a, 0x3f, 0xdf, 0x4f, 0x8d, 0x3e, 0xfc, 0xa9, 0xf1, 0x3e,
            0x8d, 0x97, 0xae, 0x3e, 0x66, 0x66, 0x46, 0x3f, 0xf4, 0xfd, 0x54, 0x3e,
            0xc5, 0x20, 0x50, 0x3f, 0x27, 0x31, 0xc8, 0x3e, 0x2f, 0xdd, 0x04, 0x3f,
            0x17, 0xd9, 0x8e, 0x3e, 0xf6, 0x28, 0x3c, 0x3f, 0xf4, 0xfd, 0x54, 0x3e,
            0x3d, 0x0a, 0x57, 0x3f, 0xe7, 0xfb, 0x29, 0x3e, 0xcf, 0xf7, 0x53, 0x3f,
            0xf2, 0xd2, 0x2d, 0x3f, 0x71, 0x3d, 0x6a, 0x3f, 0x9a, 0x99, 0x79, 0x3f
        );

        private static readonly ImmutableArray<byte> MeshSerializedSecondTransformBitangents = ImmutableArray.Create<byte>
        (
            0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
            0x02, 0x2b, 0x07, 0x3f, 0x60, 0xe5, 0xd0, 0x3d, 0x29, 0x5c, 0x0f, 0x3d,
            0x2b, 0x87, 0x16, 0x3f, 0x37, 0x89, 0x21, 0x3f, 0xf0, 0xa7, 0xc6, 0x3e,
            0x5e, 0xba, 0x09, 0x3f, 0xb4, 0xc8, 0x56, 0x3f, 0x83, 0xc0, 0x6a, 0x3f,
            0x5a, 0x64, 0xbb, 0x3e, 0xba, 0x49, 0x0c, 0x3e, 0xb4, 0xc8, 0x76, 0x3f,
            0x1f, 0x85, 0x4b, 0x3f, 0x6d, 0xe7, 0x5b, 0x3f, 0xcf, 0xf7, 0xd3, 0x3e,
            0x71, 0x3d, 0x0a, 0x3e, 0xf6, 0x28, 0x9c, 0x3e, 0x98, 0x6e, 0x72, 0x3f,
            0x06, 0x81, 0x95, 0x3e, 0xba, 0x49, 0x6c, 0x3f, 0x0a, 0xd7, 0x03, 0x3f,
            0x1d, 0x5a, 0xe4, 0x3e, 0x4c, 0x37, 0x69, 0x3f, 0xe1, 0x7a, 0x34, 0x3f,
            0xc3, 0xf5, 0x28, 0x3e, 0xe9, 0x26, 0xb1, 0x3e, 0x5a, 0x64, 0x3b, 0x3e
        );

        private static readonly ImmutableArray<byte> MeshSerializedTextureMaps = ImmutableArray.Create<byte>
        (
            // Quantity.
            3,

            // Identifiers.
            0x7b, 0x82, 0x43, 0xf1, 0x28, 0x9c, 0x4f, 0x29, 0x85, 0xcd, 0xf4, 0x61, 0xea, 0x3f, 0x7a, 0xc7,
            0xd6, 0x12, 0xd2, 0xaf, 0x79, 0x8a, 0x4e, 0x66, 0x89, 0x36, 0x12, 0xfc, 0x61, 0xfc, 0xa7, 0xe3,
            0x74, 0x84, 0xe4, 0xfb, 0x88, 0xfb, 0x48, 0xca, 0xaa, 0x57, 0xbe, 0x16, 0xcb, 0x2a, 0xdb, 0xf5,

            // Coordinates.
            0x1b, 0x2f, 0x5d, 0x3e, 0x3d, 0x0a, 0xd7, 0x3e,
            0x42, 0x60, 0x65, 0x3f, 0x5c, 0x8f, 0x42, 0x3f,
            0x02, 0x2b, 0x07, 0x3f, 0xbc, 0x74, 0x13, 0x3c,
            0x3d, 0x0a, 0x17, 0x3f, 0x21, 0xb0, 0x32, 0x3f,
            0xc9, 0x76, 0xfe, 0x3e, 0xbc, 0x74, 0x53, 0x3f,
            0x1b, 0x2f, 0x3d, 0x3f, 0x37, 0x89, 0x81, 0x3e,
            0x4e, 0x62, 0x70, 0x3f, 0x4c, 0x37, 0x69, 0x3f,
            0xd3, 0x4d, 0xe2, 0x3e, 0x5c, 0x8f, 0xc2, 0x3e,
            0x56, 0x0e, 0xad, 0x3e, 0x9a, 0x99, 0x39, 0x3f,
            0xb0, 0x72, 0xe8, 0x3e, 0xdb, 0xf9, 0x1e, 0x3f,

            0x6d, 0xe7, 0xbb, 0x3e, 0x77, 0xbe, 0x1f, 0x3d,
            0xcf, 0xf7, 0x33, 0x3f, 0x1b, 0x2f, 0x5d, 0x3f,
            0x75, 0x93, 0x18, 0x3f, 0x0a, 0xd7, 0x23, 0x3f,
            0x9a, 0x99, 0x59, 0x3f, 0x50, 0x8d, 0x97, 0x3e,
            0x56, 0x0e, 0xed, 0x3e, 0xb4, 0xc8, 0xb6, 0x3e,
            0x7d, 0x3f, 0x35, 0x3f, 0xc5, 0x20, 0x50, 0x3f,
            0xa4, 0x70, 0x1d, 0x3f, 0xf6, 0x28, 0x5c, 0x3f,
            0xfa, 0x7e, 0x0a, 0x3f, 0xd7, 0xa3, 0x50, 0x3f,
            0x9a, 0x99, 0x99, 0x3d, 0x79, 0xe9, 0xa6, 0x3e,
            0x42, 0x60, 0x45, 0x3f, 0x42, 0x60, 0x25, 0x3f,

            0xe7, 0xfb, 0xa9, 0x3e, 0xbc, 0x74, 0x13, 0x3c,
            0x56, 0x0e, 0x6d, 0x3f, 0x54, 0xe3, 0x45, 0x3f,
            0xb8, 0x1e, 0x45, 0x3f, 0xc5, 0x20, 0x30, 0x3e,
            0x5e, 0xba, 0xc9, 0x3e, 0xe9, 0x26, 0x51, 0x3f,
            0xfc, 0xa9, 0xf1, 0x3d, 0x0a, 0xd7, 0x43, 0x3f,
            0xba, 0x49, 0x0c, 0x3e, 0xdd, 0x24, 0x46, 0x3f,
            0x9c, 0xc4, 0xe0, 0x3e, 0x12, 0x83, 0x80, 0x3e,
            0x29, 0x5c, 0x0f, 0x3f, 0xcf, 0xf7, 0x53, 0x3e,
            0xcd, 0xcc, 0xcc, 0x3d, 0x5e, 0xba, 0x09, 0x3f,
            0xdd, 0x24, 0x46, 0x3f, 0xa8, 0xc6, 0xcb, 0x3e
        );

        private static readonly ImmutableArray<byte> MeshSerializedColorLayers = ImmutableArray.Create<byte>
        (
            // Quantity.
            4,

            // Identifiers.
            0x4a, 0x17, 0xb3, 0x86, 0x94, 0x49, 0x4c, 0x7b, 0x83, 0x79, 0x36, 0xf0, 0x06, 0xfc, 0x79, 0xa7,
            0x78, 0xa0, 0x61, 0x62, 0x12, 0xc3, 0x49, 0xb6, 0xa4, 0xd4, 0xb2, 0xb2, 0x20, 0x1e, 0x0f, 0xd4,
            0xcf, 0xf5, 0xa7, 0x0f, 0xf3, 0x45, 0x44, 0x9a, 0xb8, 0xe5, 0x2f, 0xff, 0xc4, 0x10, 0x13, 0xbe,
            0x1f, 0x4b, 0xcf, 0x41, 0xd3, 0x52, 0x4f, 0x2a, 0x95, 0xfd, 0x65, 0x44, 0xd3, 0xf8, 0x81, 0x49,

            // Colors.
            0x21, 0x0f, 0xb3, 0x82,
            0x9f, 0x5f, 0x1e, 0xa1,
            0x93, 0x20, 0x56, 0xa6,
            0x55, 0xaf, 0x03, 0xef,
            0xc3, 0x54, 0x9a, 0xcf,
            0x38, 0x1e, 0xc9, 0x64,
            0x9f, 0x43, 0x9b, 0x58,
            0xa3, 0x6a, 0xa0, 0xb3,
            0x05, 0x7b, 0x65, 0xb0,
            0xf6, 0xd0, 0x6b, 0x07,

            0x48, 0x28, 0x6e, 0xd7,
            0x60, 0x22, 0x44, 0xa3,
            0xe6, 0xf7, 0x67, 0x15,
            0xc9, 0x90, 0xcf, 0xa1,
            0x1d, 0x65, 0x49, 0xda,
            0x5a, 0xa4, 0xb8, 0x95,
            0xe5, 0xad, 0x04, 0xc4,
            0x53, 0x7e, 0xbe, 0x69,
            0xba, 0xdb, 0x77, 0xd9,
            0x69, 0xd5, 0xd8, 0xaf,

            0x22, 0xb7, 0x09, 0x2d,
            0xe1, 0xf7, 0x61, 0xd7,
            0x13, 0xeb, 0x52, 0x24,
            0x6a, 0x92, 0x54, 0xf4,
            0x8a, 0x67, 0xba, 0xb5,
            0x65, 0x77, 0x96, 0x93,
            0xc6, 0xae, 0xcd, 0x65,
            0x76, 0xff, 0x88, 0xcc,
            0x70, 0xbd, 0x51, 0xb8,
            0x8a, 0xa0, 0xfd, 0xf5,

            0x19, 0x46, 0x43, 0xa9,
            0xd8, 0x8c, 0xa1, 0xfc,
            0x4b, 0x7b, 0xda, 0x9e,
            0x57, 0x36, 0x4a, 0xbd,
            0x7b, 0xc5, 0x3f, 0x9a,
            0x70, 0xbd, 0xaa, 0x61,
            0x5d, 0xa1, 0xaa, 0x4a,
            0x00, 0xc8, 0xff, 0x19,
            0xb8, 0xdb, 0x9c, 0x30,
            0x41, 0xbf, 0x77, 0xc6
        );

#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously
        private static async IAsyncEnumerable<byte> ByteSequence(params IEnumerable<byte>[] bytes)
#pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously
        {
            foreach (var set in bytes)
            {
                foreach (var b in set)
                {
                    yield return b;
                }
            }
        }

        private static async ValueTask Valid(IEnumerable<IInstruction> instructions, params IEnumerable<byte>[] bytes)
        {
            var enumerable = new Mock<IAsyncEnumerable<byte>>();
            var enumerator = ByteSequence(bytes).GetAsyncEnumerator();
            enumerable.Setup(e => e.GetAsyncEnumerator(default)).Returns(enumerator);
            var patchInstructionDeserializer = new PatchInstructionDeserializer();

            var stream = patchInstructionDeserializer.Deserialize(enumerable.Object);

            var actual = new List<IInstruction>();
            await foreach (var instruction in stream)
            {
                actual.Add(instruction);
            }
            CollectionAssert.AreEquivalent(instructions.ToArray(), actual);
            enumerable.Verify(e => e.GetAsyncEnumerator(default), Times.Once);
            enumerable.VerifyNoOtherCalls();
        }

        private static async ValueTask Invalid(string message, IEnumerable<IInstruction> instructions, params IEnumerable<byte>[] bytes)
        {
            var enumerable = new Mock<IAsyncEnumerable<byte>>();
            var enumerator = ByteSequence(bytes).GetAsyncEnumerator();
            enumerable.Setup(e => e.GetAsyncEnumerator(default)).Returns(enumerator);
            var patchInstructionDeserializer = new PatchInstructionDeserializer();

            var actual = new List<IInstruction>();
            try
            {
                await foreach (var instruction in patchInstructionDeserializer.Deserialize(enumerable.Object))
                {
                    actual.Add(instruction);
                }
                Assert.Fail();
            }
            catch (InvalidDataException exception)
            {
                Assert.IsNull(exception.InnerException);
                Assert.AreEqual(message, exception.Message);
            }

            CollectionAssert.IsSubsetOf(actual, instructions.ToArray());
            enumerable.Verify(e => e.GetAsyncEnumerator(default), Times.Once);
            enumerable.VerifyNoOtherCalls();
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenBytesNull()
        {
            var patchInstructionDeserializer = new PatchInstructionDeserializer();

            var actual = new List<IInstruction>();
            try
            {
                await foreach (var instruction in patchInstructionDeserializer.Deserialize(null!))
                {
                    actual.Add(instruction);
                }
                Assert.Fail();
            }
            catch (ArgumentNullException exception)
            {
                Assert.IsNull(exception.InnerException);
                Assert.AreEqual("Value cannot be null. (Parameter 'bytes')", exception.Message);
                Assert.AreEqual("bytes", exception.ParamName);
            }
            Assert.IsFalse(actual.Any());
        }

        [TestMethod]
        public async Task Empty()
        {
            await Valid(Enumerable.Empty<IInstruction>());
        }

        [TestMethod]
        public async Task ValidAllTypes()
        {
            await Valid
            (
                new IInstruction[]
                {
                    new SetReference
                    (
                        new Guid("077d5e6d-4908-494a-bebe-1093940b7f23"),
                        new Guid("a1bcd828-7a4f-4729-b1e4-8feb6145f244"),
                        new Guid("0131ba55-b339-40d7-b2c3-d787345e0c10")
                    ),
                    new SetString
                    (
                        new Guid("4dbb0011-782a-4ca7-8313-4c933e461f82"),
                        new Guid("1e84a43c-3997-4ee2-a6ac-85e88159fb27"),
                        "Test §あ𩸽 String Value"
                    ),
                    new SetFloat
                    (
                        new Guid("20e6d525-dfd5-4fea-9a6f-9bc53a951eb3"),
                        new Guid("1a475951-bd54-4476-87af-9616ba9df32e"),
                        3.14159265359f
                    ),
                    new SetFlag
                    (
                        new Guid("8bf7cb1e-c44c-45a9-be3c-e1eac480cd04"),
                        new Guid("fcc3a784-b935-43e9-82a7-3e1408f673bb")
                    ),
                    new ClearFlag
                    (
                        new Guid("392f27e6-7eeb-4ec3-9103-587526655640"),
                        new Guid("4865ed06-6415-4fcc-9fa9-760b49a00bb2")
                    ),
                    new SetTag
                    (
                        new Guid("089d6e47-2453-4a98-9df8-100d1de10474"),
                        "Test §あ𩸽 Tag Value"
                    ),
                    new SetColor
                    (
                        new Guid("ecac5e5b-ad2e-40fa-98ca-d53a3c7de559"),
                        new Guid("f4ad70f3-8558-4418-8b7f-c4b703135eb6"),
                        new Color(0x7e, 0x75, 0xb5)
                    ),
                    new SetImage
                    (
                        new Guid("0e5362a7-f460-4b3d-9439-f5deb2c5f5eb"),
                        new Guid("43e6e7fa-9f20-4e20-92f8-727f7c1e5252"),
                        new Image
                        (
                            3,
                            ImmutableArray.Create
                            (
                                new ColorWithOpacity(0xf8, 0xd5, 0x5f, 0x80),
                                new ColorWithOpacity(0x67, 0xe4, 0x6d, 0xcf),
                                new ColorWithOpacity(0x3f, 0xa0, 0x85, 0x9c),
                                new ColorWithOpacity(0x56, 0xe5, 0x5a, 0x79),
                                new ColorWithOpacity(0xf0, 0x51, 0x4d, 0x0d),
                                new ColorWithOpacity(0x60, 0x0a, 0x51, 0xa1)
                            )
                        )
                    ),
                    new SetMesh
                    (
                        new Guid("ed2260d7-8359-4137-8828-91186bc1b3cb"),
                        new Guid("89af1d91-ebb7-4ee6-8bd8-5097c6ca4ca3"),
                        new Mesh
                        (
                            MeshTests.Transforms,
                            MeshTests.FirstTransformIndices,
                            MeshTests.FirstTransformPositions,
                            null,
                            null,
                            null,
                            MeshTests.SecondTransformIndices,
                            MeshTests.SecondTransformPositions,
                            null,
                            null,
                            null,
                            MeshTests.TransformBlendFactors,
                            MeshTests.TextureCoordinates,
                            MeshTests.Colors,
                            MeshTests.Indices
                        )
                    )
                },
                new byte[]
                {
                    0,
                    0x07, 0x7d, 0x5e, 0x6d, 0x49, 0x08, 0x49, 0x4a, 0xbe, 0xbe, 0x10, 0x93, 0x94, 0x0b, 0x7f, 0x23,
                    0xa1, 0xbc, 0xd8, 0x28, 0x7a, 0x4f, 0x47, 0x29, 0xb1, 0xe4, 0x8f, 0xeb, 0x61, 0x45, 0xf2, 0x44,
                    0x01, 0x31, 0xba, 0x55, 0xb3, 0x39, 0x40, 0xd7, 0xb2, 0xc3, 0xd7, 0x87, 0x34, 0x5e, 0x0c, 0x10,

                    1,
                    0x4d, 0xbb, 0x00, 0x11, 0x78, 0x2a, 0x4c, 0xa7, 0x83, 0x13, 0x4c, 0x93, 0x3e, 0x46, 0x1f, 0x82,
                    0x1e, 0x84, 0xa4, 0x3c, 0x39, 0x97, 0x4e, 0xe2, 0xa6, 0xac, 0x85, 0xe8, 0x81, 0x59, 0xfb, 0x27,
                    27, 0,
                    0x54, 0x65, 0x73, 0x74, 0x20, 0xc2, 0xa7, 0xe3, 0x81, 0x82, 0xf0, 0xa9, 0xb8, 0xbd, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65,

                    2,
                    0x20, 0xe6, 0xd5, 0x25, 0xdf, 0xd5, 0x4f, 0xea, 0x9a, 0x6f, 0x9b, 0xc5, 0x3a, 0x95, 0x1e, 0xb3,
                    0x1a, 0x47, 0x59, 0x51, 0xbd, 0x54, 0x44, 0x76, 0x87, 0xaf, 0x96, 0x16, 0xba, 0x9d, 0xf3, 0x2e,
                    0xdb, 0x0f, 0x49, 0x40,

                    3,
                    0x8b, 0xf7, 0xcb, 0x1e, 0xc4, 0x4c, 0x45, 0xa9, 0xbe, 0x3c, 0xe1, 0xea, 0xc4, 0x80, 0xcd, 0x04,
                    0xfc, 0xc3, 0xa7, 0x84, 0xb9, 0x35, 0x43, 0xe9, 0x82, 0xa7, 0x3e, 0x14, 0x08, 0xf6, 0x73, 0xbb,

                    4,
                    0x39, 0x2f, 0x27, 0xe6, 0x7e, 0xeb, 0x4e, 0xc3, 0x91, 0x03, 0x58, 0x75, 0x26, 0x65, 0x56, 0x40,
                    0x48, 0x65, 0xed, 0x06, 0x64, 0x15, 0x4f, 0xcc, 0x9f, 0xa9, 0x76, 0x0b, 0x49, 0xa0, 0x0b, 0xb2,

                    5,
                    0x08, 0x9d, 0x6e, 0x47, 0x24, 0x53, 0x4a, 0x98, 0x9d, 0xf8, 0x10, 0x0d, 0x1d, 0xe1, 0x04, 0x74,
                    24,
                    0x54, 0x65, 0x73, 0x74, 0x20, 0xc2, 0xa7, 0xe3, 0x81, 0x82, 0xf0, 0xa9, 0xb8, 0xbd, 0x20, 0x54, 0x61, 0x67, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65,

                    6,
                    0xec, 0xac, 0x5e, 0x5b, 0xad, 0x2e, 0x40, 0xfa, 0x98, 0xca, 0xd5, 0x3a, 0x3c, 0x7d, 0xe5, 0x59,
                    0xf4, 0xad, 0x70, 0xf3, 0x85, 0x58, 0x44, 0x18, 0x8b, 0x7f, 0xc4, 0xb7, 0x03, 0x13, 0x5e, 0xb6,
                    0x7e, 0x75, 0xb5,

                    7,
                    0x0e, 0x53, 0x62, 0xa7, 0xf4, 0x60, 0x4b, 0x3d, 0x94, 0x39, 0xf5, 0xde, 0xb2, 0xc5, 0xf5, 0xeb,
                    0x43, 0xe6, 0xe7, 0xfa, 0x9f, 0x20, 0x4e, 0x20, 0x92, 0xf8, 0x72, 0x7f, 0x7c, 0x1e, 0x52, 0x52,
                    3, 2,
                    0xf8, 0xd5, 0x5f, 0x80,
                    0x67, 0xe4, 0x6d, 0xcf,
                    0x3f, 0xa0, 0x85, 0x9c,
                    0x56, 0xe5, 0x5a, 0x79,
                    0xf0, 0x51, 0x4d, 0x0d,
                    0x60, 0x0a, 0x51, 0xa1,

                    8,
                    0xed, 0x22, 0x60, 0xd7, 0x83, 0x59, 0x41, 0x37, 0x88, 0x28, 0x91, 0x18, 0x6b, 0xc1, 0xb3, 0xcb,
                    0x89, 0xaf, 0x1d, 0x91, 0xeb, 0xb7, 0x4e, 0xe6, 0x8b, 0xd8, 0x50, 0x97, 0xc6, 0xca, 0x4c, 0xa3,
                    0, 10, 0,
                },
                MeshTests.SerializedTransforms,
                MeshTests.FirstTransformIndices,
                MeshTests.SerializedFirstTransformPositions,
                MeshTests.SecondTransformIndices,
                MeshTests.SerializedSecondTransformPositions,
                MeshTests.TransformBlendFactors,
                MeshTests.SerializedTextureMaps,
                MeshTests.SerializedColorLayers,
                MeshTests.SerializedIndices
            );
        }

        [TestMethod]
        public async Task ValidMinimumLength()
        {
            await Valid
            (
                new IInstruction[]
                {
                    new SetReference
                    (
                        new Guid("077d5e6d-4908-494a-bebe-1093940b7f23"),
                        new Guid("a1bcd828-7a4f-4729-b1e4-8feb6145f244"),
                        new Guid("0131ba55-b339-40d7-b2c3-d787345e0c10")
                    ),
                    new SetString
                    (
                        new Guid("4dbb0011-782a-4ca7-8313-4c933e461f82"),
                        new Guid("1e84a43c-3997-4ee2-a6ac-85e88159fb27"),
                        string.Empty
                    ),
                    new SetFloat
                    (
                        new Guid("20e6d525-dfd5-4fea-9a6f-9bc53a951eb3"),
                        new Guid("1a475951-bd54-4476-87af-9616ba9df32e"),
                        3.14159265359f
                    ),
                    new SetFlag
                    (
                        new Guid("8bf7cb1e-c44c-45a9-be3c-e1eac480cd04"),
                        new Guid("fcc3a784-b935-43e9-82a7-3e1408f673bb")
                    ),
                    new ClearFlag
                    (
                        new Guid("392f27e6-7eeb-4ec3-9103-587526655640"),
                        new Guid("4865ed06-6415-4fcc-9fa9-760b49a00bb2")
                    ),
                    new SetTag
                    (
                        new Guid("089d6e47-2453-4a98-9df8-100d1de10474"),
                        "T"
                    ),
                    new SetColor
                    (
                        new Guid("ecac5e5b-ad2e-40fa-98ca-d53a3c7de559"),
                        new Guid("f4ad70f3-8558-4418-8b7f-c4b703135eb6"),
                        new Color(0x7e, 0x75, 0xb5)
                    ),
                    new SetImage
                    (
                        new Guid("0e5362a7-f460-4b3d-9439-f5deb2c5f5eb"),
                        new Guid("43e6e7fa-9f20-4e20-92f8-727f7c1e5252"),
                        new Image
                        (
                            1,
                            ImmutableArray.Create
                            (
                                new ColorWithOpacity(0xf8, 0xd5, 0x5f, 0x80)
                            )
                        )
                    ),
                    new SetMesh
                    (
                        new Guid("ed2260d7-8359-4137-8828-91186bc1b3cb"),
                        new Guid("89af1d91-ebb7-4ee6-8bd8-5097c6ca4ca3"),
                        new Mesh
                        (
                            ImmutableSortedSet.Create(new Guid("63b7815c-0070-446f-923d-2e11e99bf75d")),
                            ImmutableArray.Create<byte>(0),
                            ImmutableArray.Create(new Vector3(0.693f, 0.761f, 0.993f)),
                            ImmutableArray.Create(new Vector3(0.241f, 0.896f, 0.192f)),
                            ImmutableArray.Create(new Vector3(0.074f, 0.760f, 0.976f)),
                            ImmutableArray.Create(new Vector3(0.694f, 0.620f, 0.305f)),
                            ImmutableArray.Create<byte>(0),
                            ImmutableArray.Create(new Vector3(0.799f, 0.067f, 0.479f)),
                            ImmutableArray.Create(new Vector3(0.422f, 0.542f, 0.298f)),
                            ImmutableArray.Create(new Vector3(0.030f, 0.701f, 0.086f)),
                            ImmutableArray.Create(new Vector3(0.132f, 0.704f, 0.945f)),
                            ImmutableArray.Create<byte>(177),
                            ImmutableSortedDictionary<Guid, ImmutableArray<Vector2>>.Empty,
                            ImmutableSortedDictionary<Guid, ImmutableArray<ColorWithOpacity>>.Empty,
                            ImmutableArray.Create<ushort>(0, 0, 0)
                        )
                    )
                },
                new byte[]
                {
                    0,
                    0x07, 0x7d, 0x5e, 0x6d, 0x49, 0x08, 0x49, 0x4a, 0xbe, 0xbe, 0x10, 0x93, 0x94, 0x0b, 0x7f, 0x23,
                    0xa1, 0xbc, 0xd8, 0x28, 0x7a, 0x4f, 0x47, 0x29, 0xb1, 0xe4, 0x8f, 0xeb, 0x61, 0x45, 0xf2, 0x44,
                    0x01, 0x31, 0xba, 0x55, 0xb3, 0x39, 0x40, 0xd7, 0xb2, 0xc3, 0xd7, 0x87, 0x34, 0x5e, 0x0c, 0x10,

                    1,
                    0x4d, 0xbb, 0x00, 0x11, 0x78, 0x2a, 0x4c, 0xa7, 0x83, 0x13, 0x4c, 0x93, 0x3e, 0x46, 0x1f, 0x82,
                    0x1e, 0x84, 0xa4, 0x3c, 0x39, 0x97, 0x4e, 0xe2, 0xa6, 0xac, 0x85, 0xe8, 0x81, 0x59, 0xfb, 0x27,
                    0, 0,

                    2,
                    0x20, 0xe6, 0xd5, 0x25, 0xdf, 0xd5, 0x4f, 0xea, 0x9a, 0x6f, 0x9b, 0xc5, 0x3a, 0x95, 0x1e, 0xb3,
                    0x1a, 0x47, 0x59, 0x51, 0xbd, 0x54, 0x44, 0x76, 0x87, 0xaf, 0x96, 0x16, 0xba, 0x9d, 0xf3, 0x2e,
                    0xdb, 0x0f, 0x49, 0x40,

                    3,
                    0x8b, 0xf7, 0xcb, 0x1e, 0xc4, 0x4c, 0x45, 0xa9, 0xbe, 0x3c, 0xe1, 0xea, 0xc4, 0x80, 0xcd, 0x04,
                    0xfc, 0xc3, 0xa7, 0x84, 0xb9, 0x35, 0x43, 0xe9, 0x82, 0xa7, 0x3e, 0x14, 0x08, 0xf6, 0x73, 0xbb,

                    4,
                    0x39, 0x2f, 0x27, 0xe6, 0x7e, 0xeb, 0x4e, 0xc3, 0x91, 0x03, 0x58, 0x75, 0x26, 0x65, 0x56, 0x40,
                    0x48, 0x65, 0xed, 0x06, 0x64, 0x15, 0x4f, 0xcc, 0x9f, 0xa9, 0x76, 0x0b, 0x49, 0xa0, 0x0b, 0xb2,

                    5,
                    0x08, 0x9d, 0x6e, 0x47, 0x24, 0x53, 0x4a, 0x98, 0x9d, 0xf8, 0x10, 0x0d, 0x1d, 0xe1, 0x04, 0x74,
                    1,
                    0x54,

                    6,
                    0xec, 0xac, 0x5e, 0x5b, 0xad, 0x2e, 0x40, 0xfa, 0x98, 0xca, 0xd5, 0x3a, 0x3c, 0x7d, 0xe5, 0x59,
                    0xf4, 0xad, 0x70, 0xf3, 0x85, 0x58, 0x44, 0x18, 0x8b, 0x7f, 0xc4, 0xb7, 0x03, 0x13, 0x5e, 0xb6,
                    0x7e, 0x75, 0xb5,

                    7,
                    0x0e, 0x53, 0x62, 0xa7, 0xf4, 0x60, 0x4b, 0x3d, 0x94, 0x39, 0xf5, 0xde, 0xb2, 0xc5, 0xf5, 0xeb,
                    0x43, 0xe6, 0xe7, 0xfa, 0x9f, 0x20, 0x4e, 0x20, 0x92, 0xf8, 0x72, 0x7f, 0x7c, 0x1e, 0x52, 0x52,
                    1, 1,
                    0xf8, 0xd5, 0x5f, 0x80,

                    8,
                    0xed, 0x22, 0x60, 0xd7, 0x83, 0x59, 0x41, 0x37, 0x88, 0x28, 0x91, 0x18, 0x6b, 0xc1, 0xb3, 0xcb,
                    0x89, 0xaf, 0x1d, 0x91, 0xeb, 0xb7, 0x4e, 0xe6, 0x8b, 0xd8, 0x50, 0x97, 0xc6, 0xca, 0x4c, 0xa3,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ValidMeshWithNormals()
        {
            await Valid
            (
                new IInstruction[]
                {
                    new SetMesh
                    (
                        new Guid("ed2260d7-8359-4137-8828-91186bc1b3cb"),
                        new Guid("89af1d91-ebb7-4ee6-8bd8-5097c6ca4ca3"),
                        new Mesh
                        (
                            MeshTests.Transforms,
                            MeshTests.FirstTransformIndices,
                            MeshTests.FirstTransformPositions,
                            MeshTests.FirstTransformNormals,
                            null,
                            null,
                            MeshTests.SecondTransformIndices,
                            MeshTests.SecondTransformPositions,
                            MeshTests.SecondTransformNormals,
                            null,
                            null,
                            MeshTests.TransformBlendFactors,
                            MeshTests.TextureCoordinates,
                            MeshTests.Colors,
                            MeshTests.Indices
                        )
                    )
                },
                new byte[]
                {
                    8,
                    0xed, 0x22, 0x60, 0xd7, 0x83, 0x59, 0x41, 0x37, 0x88, 0x28, 0x91, 0x18, 0x6b, 0xc1, 0xb3, 0xcb,
                    0x89, 0xaf, 0x1d, 0x91, 0xeb, 0xb7, 0x4e, 0xe6, 0x8b, 0xd8, 0x50, 0x97, 0xc6, 0xca, 0x4c, 0xa3,
                    1, 10, 0,
                },
                MeshTests.SerializedTransforms,
                MeshTests.FirstTransformIndices,
                MeshTests.SerializedFirstTransformPositions,
                MeshTests.SerializedFirstTransformNormals,
                MeshTests.SecondTransformIndices,
                MeshTests.SerializedSecondTransformPositions,
                MeshTests.SerializedSecondTransformNormals,
                MeshTests.TransformBlendFactors,
                MeshTests.SerializedTextureMaps,
                MeshTests.SerializedColorLayers,
                MeshTests.SerializedIndices
            );
        }

        [TestMethod]
        public async Task ValidMeshWithTangents()
        {
            await Valid
            (
                new IInstruction[]
                {
                    new SetMesh
                    (
                        new Guid("ed2260d7-8359-4137-8828-91186bc1b3cb"),
                        new Guid("89af1d91-ebb7-4ee6-8bd8-5097c6ca4ca3"),
                        new Mesh
                        (
                            MeshTests.Transforms,
                            MeshTests.FirstTransformIndices,
                            MeshTests.FirstTransformPositions,
                            null,
                            MeshTests.FirstTransformTangents,
                            null,
                            MeshTests.SecondTransformIndices,
                            MeshTests.SecondTransformPositions,
                            null,
                            MeshTests.SecondTransformTangents,
                            null,
                            MeshTests.TransformBlendFactors,
                            MeshTests.TextureCoordinates,
                            MeshTests.Colors,
                            MeshTests.Indices
                        )
                    )
                },
                new byte[]
                {
                    8,
                    0xed, 0x22, 0x60, 0xd7, 0x83, 0x59, 0x41, 0x37, 0x88, 0x28, 0x91, 0x18, 0x6b, 0xc1, 0xb3, 0xcb,
                    0x89, 0xaf, 0x1d, 0x91, 0xeb, 0xb7, 0x4e, 0xe6, 0x8b, 0xd8, 0x50, 0x97, 0xc6, 0xca, 0x4c, 0xa3,
                    2, 10, 0,
                },
                MeshTests.SerializedTransforms,
                MeshTests.FirstTransformIndices,
                MeshTests.SerializedFirstTransformPositions,
                MeshTests.SerializedFirstTransformTangents,
                MeshTests.SecondTransformIndices,
                MeshTests.SerializedSecondTransformPositions,
                MeshTests.SerializedSecondTransformTangents,
                MeshTests.TransformBlendFactors,
                MeshTests.SerializedTextureMaps,
                MeshTests.SerializedColorLayers,
                MeshTests.SerializedIndices
            );
        }

        [TestMethod]
        public async Task ValidMeshWithBitangents()
        {
            await Valid
            (
                new IInstruction[]
                {
                    new SetMesh
                    (
                        new Guid("ed2260d7-8359-4137-8828-91186bc1b3cb"),
                        new Guid("89af1d91-ebb7-4ee6-8bd8-5097c6ca4ca3"),
                        new Mesh
                        (
                            MeshTests.Transforms,
                            MeshTests.FirstTransformIndices,
                            MeshTests.FirstTransformPositions,
                            null,
                            null,
                            MeshTests.FirstTransformBitangents,
                            MeshTests.SecondTransformIndices,
                            MeshTests.SecondTransformPositions,
                            null,
                            null,
                            MeshTests.SecondTransformBitangents,
                            MeshTests.TransformBlendFactors,
                            MeshTests.TextureCoordinates,
                            MeshTests.Colors,
                            MeshTests.Indices
                        )
                    )
                },
                new byte[]
                {
                    8,
                    0xed, 0x22, 0x60, 0xd7, 0x83, 0x59, 0x41, 0x37, 0x88, 0x28, 0x91, 0x18, 0x6b, 0xc1, 0xb3, 0xcb,
                    0x89, 0xaf, 0x1d, 0x91, 0xeb, 0xb7, 0x4e, 0xe6, 0x8b, 0xd8, 0x50, 0x97, 0xc6, 0xca, 0x4c, 0xa3,
                    4, 10, 0,
                },
                MeshTests.SerializedTransforms,
                MeshTests.FirstTransformIndices,
                MeshTests.SerializedFirstTransformPositions,
                MeshTests.SerializedFirstTransformBitangents,
                MeshTests.SecondTransformIndices,
                MeshTests.SerializedSecondTransformPositions,
                MeshTests.SerializedSecondTransformBitangents,
                MeshTests.TransformBlendFactors,
                MeshTests.SerializedTextureMaps,
                MeshTests.SerializedColorLayers,
                MeshTests.SerializedIndices
            );
        }

        [TestMethod]
        public async Task ValidMeshWithAll()
        {
            await Valid
            (
                new IInstruction[]
                {
                    new SetMesh
                    (
                        new Guid("ed2260d7-8359-4137-8828-91186bc1b3cb"),
                        new Guid("89af1d91-ebb7-4ee6-8bd8-5097c6ca4ca3"),
                        new Mesh
                        (
                            MeshTests.Transforms,
                            MeshTests.FirstTransformIndices,
                            MeshTests.FirstTransformPositions,
                            MeshTests.FirstTransformNormals,
                            MeshTests.FirstTransformTangents,
                            MeshTests.FirstTransformBitangents,
                            MeshTests.SecondTransformIndices,
                            MeshTests.SecondTransformPositions,
                            MeshTests.SecondTransformNormals,
                            MeshTests.SecondTransformTangents,
                            MeshTests.SecondTransformBitangents,
                            MeshTests.TransformBlendFactors,
                            MeshTests.TextureCoordinates,
                            MeshTests.Colors,
                            MeshTests.Indices
                        )
                    )
                },
                new byte[]
                {
                    8,
                    0xed, 0x22, 0x60, 0xd7, 0x83, 0x59, 0x41, 0x37, 0x88, 0x28, 0x91, 0x18, 0x6b, 0xc1, 0xb3, 0xcb,
                    0x89, 0xaf, 0x1d, 0x91, 0xeb, 0xb7, 0x4e, 0xe6, 0x8b, 0xd8, 0x50, 0x97, 0xc6, 0xca, 0x4c, 0xa3,
                    7, 10, 0,
                },
                MeshTests.SerializedTransforms,
                MeshTests.FirstTransformIndices,
                MeshTests.SerializedFirstTransformPositions,
                MeshTests.SerializedFirstTransformNormals,
                MeshTests.SerializedFirstTransformTangents,
                MeshTests.SerializedFirstTransformBitangents,
                MeshTests.SecondTransformIndices,
                MeshTests.SerializedSecondTransformPositions,
                MeshTests.SerializedSecondTransformNormals,
                MeshTests.SerializedSecondTransformTangents,
                MeshTests.SerializedSecondTransformBitangents,
                MeshTests.TransformBlendFactors,
                MeshTests.SerializedTextureMaps,
                MeshTests.SerializedColorLayers,
                MeshTests.SerializedIndices
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenUnexpectedBitASetInSetMeshFeatureFlags()
        {
            await Invalid
            (
                "Unexpected mesh feature flags.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    8,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenUnexpectedBitBSetInSetMeshFeatureFlags()
        {
            await Invalid
            (
                "Unexpected mesh feature flags.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    23,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshHasZeroVertices()
        {
            await Invalid
            (
                "Mesh has no vertices.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    0, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenInterruptedBeforeSetMeshNumberOfVertices()
        {
            await Invalid
            (
                "Unexpected EOF during number of vertices in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenInterruptedDuringSetMeshNumberOfVertices()
        {
            await Invalid
            (
                "Unexpected EOF during number of vertices in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    34
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetReferenceEntityInterrupted()
        {
            await Invalid("Unexpected EOF during entity in set reference instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                0,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetReferenceAttributeInterrupted()
        {
            await Invalid("Unexpected EOF during attribute in set reference instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                0,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetReferenceValueInterrupted()
        {
            await Invalid("Unexpected EOF during value in set reference instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                0,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                0x3c, 0x9c,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetStringEntityInterrupted()
        {
            await Invalid("Unexpected EOF during entity in set string instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                1,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetStringAttributeInterrupted()
        {
            await Invalid("Unexpected EOF during attribute in set string instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                1,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetStringValueLengthInterrupted()
        {
            await Invalid("Unexpected EOF during value length in set string instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                1,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetStringValueLengthInterruptedInside()
        {
            await Invalid("Unexpected EOF during value length in set string instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                1,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                3
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetStringValueContentInterrupted()
        {
            await Invalid("Unexpected EOF during value content in set string instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                1,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                3, 0,
                0x46, 0x44
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetFloatEntityInterrupted()
        {
            await Invalid("Unexpected EOF during entity in set float instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                2,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetFloatAttributeInterrupted()
        {
            await Invalid("Unexpected EOF during attribute in set float instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                2,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetFloatValueInterrupted()
        {
            await Invalid("Unexpected EOF during value in set float instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                2,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                0x3c, 0x9c,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetFlagEntityInterrupted()
        {
            await Invalid("Unexpected EOF during entity in set flag instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                3,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetFlagAttributeInterrupted()
        {
            await Invalid("Unexpected EOF during attribute in set flag instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                3,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenClearFlagEntityInterrupted()
        {
            await Invalid("Unexpected EOF during entity in clear flag instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                4,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenClearFlagAttributeInterrupted()
        {
            await Invalid("Unexpected EOF during attribute in clear flag instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                4,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetTagIdentifierInterrupted()
        {
            await Invalid("Unexpected EOF during identifier in set tag instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                5,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetTagValueLengthInterrupted()
        {
            await Invalid("Unexpected EOF during value length in set tag instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                5,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetTagValueLengthZero()
        {
            await Invalid("Set tag instruction has empty value.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                5,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetTagValueContentInterrupted()
        {
            await Invalid("Unexpected EOF during value content in set tag instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                5,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                3
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetColorEntityInterrupted()
        {
            await Invalid("Unexpected EOF during entity in set color instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                6,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetColorAttributeInterrupted()
        {
            await Invalid("Unexpected EOF during attribute in set color instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                6,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetColorValueInterrupted()
        {
            await Invalid("Unexpected EOF during attribute in set color instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                6,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                0x3c, 0x9c,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetImageEntityInterrupted()
        {
            await Invalid("Unexpected EOF during entity in set image instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                7,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetImageAttributeInterrupted()
        {
            await Invalid("Unexpected EOF during attribute in set image instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                7,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetImageImageInterrupted()
        {
            await Invalid("Unexpected EOF during number of columns in image.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                7,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetImageNoColumns()
        {
            await Invalid(
                "Image has no columns.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    7,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    0,
                    37,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetImageNumberOfRowsInterrupted()
        {
            await Invalid(
                "Unexpected EOF during number of rows in image.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    7,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    37,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetImageNoRows()
        {
            await Invalid(
                "Image has no rows.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    7,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    37,
                    0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetImagePixelsInterrupted()
        {
            await Invalid(
                "Unexpected EOF during pixels in image.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    7,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    37,
                    12,
                    0xc6, 0xc9, 0xf7, 0x27, 0x56, 0xa0, 0xdc, 0x70, 0xf5, 0x09, 0x13, 0xaf, 0x32, 0x1a, 0x7b,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshEntityInterrupted()
        {
            await Invalid("Unexpected EOF during entity in set mesh instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                8,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshAttributeInterrupted()
        {
            await Invalid("Unexpected EOF during attribute in set mesh instruction.", Enumerable.Empty<IInstruction>(), new byte[]
            {
                8,
                0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3,
            });
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshMeshInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during mesh feature flags.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshFirstTransformPositionsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during first transform positions in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshFirstTransformNormalsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during first transform normals in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshFirstTransformTangentsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during first transform tangents in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshFirstTransformBitangentsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during first transform bitangents in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshSecondTransformPositionsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during second transform positions in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshSecondTransformNormalsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during second transform normals in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshSecondTransformTangentssInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during second transform tangents in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshSecondTransformBitangentsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during second transform bitangents in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshNumberOfTextureMapsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during number of texture maps in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshTextureMapIdentifiersInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during texture map identifiers in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    4,
                    0x92, 0xc9, 0xb4, 0x31, 0x21, 0x36, 0x7f, 0xdd, 0x49, 0xde, 0xad, 0x00, 0x88, 0x0d, 0xa5, 0x03,
                    0x2f, 0xd9, 0xf7, 0xcc, 0x35, 0x00, 0x1d, 0x3b, 0xc9, 0xff, 0x78, 0x78, 0x1f, 0x3f, 0x2c, 0xd9,
                    0xb8, 0xa4, 0xae, 0x87, 0x31, 0x67, 0x57, 0x1f,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshTextureMapIdentifiersNotUnique()
        {
            await Invalid
            (
                "Duplicate texture map identifiers in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    4,
                    0x92, 0xc9, 0xb4, 0x31, 0x21, 0x36, 0x7f, 0xdd, 0x49, 0xde, 0xad, 0x00, 0x88, 0x0d, 0xa5, 0x03,
                    0x19, 0x6c, 0xeb, 0xfb, 0xcf, 0xe2, 0xe6, 0xde, 0x42, 0xe3, 0x5b, 0xea, 0x9f, 0x8b, 0xe4, 0x72,
                    0xb8, 0xa4, 0xae, 0x87, 0x31, 0x67, 0x57, 0x1f, 0xaa, 0x5c, 0x37, 0x31, 0xae, 0x94, 0xa5, 0x50,
                    0x19, 0x6c, 0xeb, 0xfb, 0xcf, 0xe2, 0xe6, 0xde, 0x42, 0xe3, 0x5b, 0xea, 0x9f, 0x8b, 0xe4, 0x72,
                    0xaf, 0xa8, 0xee, 0x0f, 0xcf, 0xfd, 0xf6, 0x7c,
                    0x5a, 0x3a, 0xa2, 0xdc, 0x4d, 0x11, 0xef, 0x63,
                    0xc6, 0xcc, 0x5a, 0x4f, 0x6c, 0xe8, 0x8f, 0x9d,
                    0x00, 0x46, 0x80, 0x48, 0x70, 0x3d, 0x23, 0x69,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshTextureCoordinatesInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during texture map coordinates in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    4,
                    0x92, 0xc9, 0xb4, 0x31, 0x21, 0x36, 0x7f, 0xdd, 0x49, 0xde, 0xad, 0x00, 0x88, 0x0d, 0xa5, 0x03,
                    0x2f, 0xd9, 0xf7, 0xcc, 0x35, 0x00, 0x1d, 0x3b, 0xc9, 0xff, 0x78, 0x78, 0x1f, 0x3f, 0x2c, 0xd9,
                    0xb8, 0xa4, 0xae, 0x87, 0x31, 0x67, 0x57, 0x1f, 0xaa, 0x5c, 0x37, 0x31, 0xae, 0x94, 0xa5, 0x50,
                    0x19, 0x6c, 0xeb, 0xfb, 0xcf, 0xe2, 0xe6, 0xde, 0x42, 0xe3, 0x5b, 0xea, 0x9f, 0x8b, 0xe4, 0x72,
                    0xaf, 0xa8, 0xee, 0x0f, 0xcf, 0xfd, 0xf6, 0x7c,
                    0x5a, 0x3a, 0xa2,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshNumberOfColorLayersInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during number of color layers in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshColorLayerIdentifiersInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during color layer identifiers in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                    5,
                    0x63, 0xa2, 0xf6, 0x26, 0xf9, 0xcf, 0x46, 0x9d, 0x92, 0x3b, 0x69, 0xdb, 0xb2, 0xed, 0x99, 0x82,
                    0xf6, 0x42, 0xed, 0x0f,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshColorLayerIdentifiersNotUnique()
        {
            await Invalid
            (
                "Duplicate color layer identifiers in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                    5,
                    0x63, 0xa2, 0xf6, 0x26, 0xf9, 0xcf, 0x46, 0x9d, 0x92, 0x3b, 0x69, 0xdb, 0xb2, 0xed, 0x99, 0x82,
                    0xf6, 0x42, 0xed, 0x0f, 0x65, 0xa0, 0x4e, 0xc9, 0xb0, 0x8a, 0x06, 0x5b, 0xf9, 0xd5, 0x7d, 0x2e,
                    0x49, 0x57, 0x5d, 0xe7, 0x81, 0x8b, 0x43, 0x3e, 0xad, 0x87, 0x39, 0xbe, 0xb9, 0xee, 0x95, 0xfd,
                    0xf6, 0x42, 0xed, 0x0f, 0x65, 0xa0, 0x4e, 0xc9, 0xb0, 0x8a, 0x06, 0x5b, 0xf9, 0xd5, 0x7d, 0x2e,
                    0x96, 0x8e, 0xa3, 0x81, 0x43, 0xf4, 0x40, 0xa1, 0x83, 0x34, 0xcb, 0xef, 0x23, 0x87, 0x8b, 0xa2,
                    0x0d, 0xcd, 0x60, 0x50,
                    0x2e, 0x28, 0x87, 0x86,
                    0x31, 0xd9, 0x0f, 0x0e,
                    0xac, 0x55, 0x95, 0xf0,
                    0x5c, 0xb2, 0x6d, 0x47,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshColorLayersInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during color layer content in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                    4,
                    0x63, 0xa2, 0xf6, 0x26, 0xf9, 0xcf, 0x46, 0x9d, 0x92, 0x3b, 0x69, 0xdb, 0xb2, 0xed, 0x99, 0x82,
                    0xf6, 0x42, 0xed, 0x0f, 0x65, 0xa0, 0x4e, 0xc9, 0xb0, 0x8a, 0x06, 0x5b, 0xf9, 0xd5, 0x7d, 0x2e,
                    0x49, 0x57, 0x5d, 0xe7, 0x81, 0x8b, 0x43, 0x3e, 0xad, 0x87, 0x39, 0xbe, 0xb9, 0xee, 0x95, 0xfd,
                    0x96, 0x8e, 0xa3, 0x81, 0x43, 0xf4, 0x40, 0xa1, 0x83, 0x34, 0xcb, 0xef, 0x23, 0x87, 0x8b, 0xa2,
                    0x0d, 0xcd, 0x60, 0x50,
                    0x2e, 0x28, 0x87, 0x86,
                    0x31, 0xd9,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshInterruptedBeforeNumberOfIndices()
        {
            await Invalid
            (
                "Unexpected EOF during number of indices in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                    0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshInterruptedDuringNumberOfIndices()
        {
            await Invalid
            (
                "Unexpected EOF during number of indices in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    177,
                    0,
                    0,
                    37
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshZeroIndices()
        {
            await Invalid
            (
                "Mesh does not have at least three indices.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshOneIndex()
        {
            await Invalid
            (
                "Mesh does not have at least three indices.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    1, 0,
                    0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshTwoIndices()
        {
            await Invalid
            (
                "Mesh does not have at least three indices.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    2, 0,
                    0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshIndicesInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during indices in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshIndicesContainsIndexEqualToNumberOfVertices()
        {
            await Invalid
            (
                "Mesh index out of range.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 1, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshIndicesContainsIndexGreaterThanNumberOfVertices()
        {
            await Invalid
            (
                "Mesh index out of range.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 2, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshNumberOfTransformsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during number of transforms in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshZeroTransforms()
        {
            await Invalid
            (
                "Mesh has no transforms.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    0,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshTransformIdentifiersInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during transform identifiers in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshTransformIdentifiersNotUnique()
        {
            await Invalid
            (
                "Duplicate transform identifiers in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    5,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0x2a, 0x94, 0xe0, 0xe0, 0xca, 0x0b, 0x42, 0xa1, 0xb6, 0xac, 0x37, 0x0f, 0x63, 0x5e, 0x44, 0x47,
                    0x7b, 0x3e, 0xbb, 0xf3, 0xd3, 0x48, 0x41, 0x8d, 0x9c, 0x04, 0xea, 0xa5, 0x46, 0x2d, 0x1a, 0x69,
                    0x2a, 0x94, 0xe0, 0xe0, 0xca, 0x0b, 0x42, 0xa1, 0xb6, 0xac, 0x37, 0x0f, 0x63, 0x5e, 0x44, 0x47,
                    0xce, 0x61, 0x1c, 0x7a, 0x1a, 0x83, 0x41, 0x5f, 0xa6, 0xc8, 0x20, 0xb5, 0x5c, 0x9a, 0x90, 0x1f,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshFirstTransformIndicesInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during first transform indices in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    0,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshFirstTransformIndicesContainsNumberOfTransforms()
        {
            await Invalid
            (
                "Mesh first transform index out of range.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    1,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshFirstTransformIndicesContainsValuesGreaterThanNumberOfTransforms()
        {
            await Invalid
            (
                "Mesh first transform index out of range.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    2,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshSecondTransformIndicesInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during second transform indices in mesh.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshSecondTransformIndicesContainsNumberOfTransforms()
        {
            await Invalid
            (
                "Mesh second transform index out of range.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    1,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshSecondTransformIndicesContainsValuesGreaterThanNumberOfTransforms()
        {
            await Invalid
            (
                "Mesh second transform index out of range.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    2,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                    177,
                    0,
                    0,
                    3, 0,
                    0, 0, 0, 0, 0, 0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenSetMeshTransformBlendFactorsInterrupted()
        {
            await Invalid
            (
                "Unexpected EOF during mesh transform blend factors.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    8,
                    0xa1, 0x50, 0xcb, 0x3d, 0x09, 0x35, 0xbb, 0x8d, 0x13, 0x55, 0x24, 0x8d, 0x5e, 0x5d, 0xba, 0x4a,
                    0x51, 0xcc, 0x96, 0xd4, 0x71, 0x75, 0xa3, 0x14, 0x74, 0xdf, 0x13, 0xe9, 0xd7, 0x48, 0x75, 0x43,
                    7,
                    1, 0,
                    1,
                    0x63, 0xb7, 0x81, 0x5c, 0x00, 0x70, 0x44, 0x6f, 0x92, 0x3d, 0x2e, 0x11, 0xe9, 0x9b, 0xf7, 0x5d,
                    0,
                    0x73, 0x68, 0x31, 0x3f, 0xe5, 0xd0, 0x42, 0x3f, 0x3f, 0x35, 0x7e, 0x3f,
                    0xb4, 0xc8, 0x76, 0x3e, 0x42, 0x60, 0x65, 0x3f, 0xa6, 0x9b, 0x44, 0x3e,
                    0x50, 0x8d, 0x97, 0x3d, 0x5c, 0x8f, 0x42, 0x3f, 0x23, 0xdb, 0x79, 0x3f,
                    0xfc, 0xa9, 0x31, 0x3f, 0x52, 0xb8, 0x1e, 0x3f, 0xf6, 0x28, 0x9c, 0x3e,
                    0,
                    0x44, 0x8b, 0x4c, 0x3f, 0x4c, 0x37, 0x89, 0x3d, 0x7d, 0x3f, 0xf5, 0x3e,
                    0x62, 0x10, 0xd8, 0x3e, 0x83, 0xc0, 0x0a, 0x3f, 0x75, 0x93, 0x98, 0x3e,
                    0x8f, 0xc2, 0xf5, 0x3c, 0xbc, 0x74, 0x33, 0x3f, 0xc5, 0x20, 0xb0, 0x3d,
                    0x02, 0x2b, 0x07, 0x3e, 0x58, 0x39, 0x34, 0x3f, 0x85, 0xeb, 0x71, 0x3f,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenUnexpectedInstructionTypeA()
        {
            await Invalid
            (
                "Unexpected instruction type.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    9,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenUnexpectedInstructionTypeB()
        {
            await Invalid
            (
                "Unexpected instruction type.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    10,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenUnexpectedInstructionTypeC()
        {
            await Invalid
            (
                "Unexpected instruction type.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    9,
                    0,
                }
            );
        }

        [TestMethod]
        public async Task ThrowsExceptionWhenUnexpectedInstructionTypeD()
        {
            await Invalid
            (
                "Unexpected instruction type.",
                Enumerable.Empty<IInstruction>(),
                new byte[]
                {
                    10,
                    0,
                }
            );
        }
    }
}
