using Maryland.TagStores;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Maryland.Unit.TagStoreTests
{
    [TestClass]
    public sealed class TagStoreDiffSerializerTests
    {
        [TestMethod]
        public void SerializesToBytes()
        {
            var setAIdentifier = new Guid("291bcdb8-9199-49b2-8dff-b8584934121e");
            var setBIdentifier = new Guid("d2b6790d-9fa2-4595-8100-d44cee52c696");
            var setCIdentifier = new Guid("b51793db-115e-43f6-843c-a8abef20f76c");
            var set = ImmutableDictionary<Guid, string>
                .Empty
                .Add(setAIdentifier, "Test Tag A")
                .Add(setBIdentifier, "Test Tag あ𩸽§ B")
                .Add(setCIdentifier, "Test Tag C");
            var deleteAIdentifier = new Guid("f6bd80cc-16e0-478e-a1b9-2ddc9c6c4c0f");
            var deleteBIdentifier = new Guid("538574cd-47d2-4f0e-a350-27caf6affaad");
            var deleteCIdentifier = new Guid("759fdf11-4ec8-4d0b-bc38-b709ec5a0757");
            var deleteDIdentifier = new Guid("a2b2b0fb-d50a-4eb0-bc63-8f481260e43c");
            var deleted = ImmutableHashSet.Create(deleteAIdentifier, deleteBIdentifier, deleteCIdentifier, deleteDIdentifier);
            var tagStoreDiff = new TagStoreDiff(set, deleted);
            var tagStoreDiffSerializer = new TagStoreDiffSerializer();

            var actual = tagStoreDiffSerializer.Serialize(tagStoreDiff).ToArray();

            var expected = new byte[]
            {
                3, 0, 0, 0,
                0x29, 0x1b, 0xcd, 0xb8, 0x91, 0x99, 0x49, 0xb2, 0x8d, 0xff, 0xb8, 0x58, 0x49, 0x34, 0x12, 0x1e,
                10, 0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x61, 0x67, 0x20, 0x41,
                0xb5, 0x17, 0x93, 0xdb, 0x11, 0x5e, 0x43, 0xf6, 0x84, 0x3c, 0xa8, 0xab, 0xef, 0x20, 0xf7, 0x6c,
                10, 0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x61, 0x67, 0x20, 0x43,
                0xd2, 0xb6, 0x79, 0x0d, 0x9f, 0xa2, 0x45, 0x95, 0x81, 0x00, 0xd4, 0x4c, 0xee, 0x52, 0xc6, 0x96,
                20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x54, 0x61, 0x67, 0x20, 0xe3, 0x81, 0x82, 0xf0, 0xa9, 0xb8, 0xbd, 0xc2, 0xa7, 0x20, 0x42,
                4, 0, 0, 0,
                0x53, 0x85, 0x74, 0xcd, 0x47, 0xd2, 0x4f, 0x0e, 0xa3, 0x50, 0x27, 0xca, 0xf6, 0xaf, 0xfa, 0xad,
                0x75, 0x9f, 0xdf, 0x11, 0x4e, 0xc8, 0x4d, 0x0b, 0xbc, 0x38, 0xb7, 0x09, 0xec, 0x5a, 0x07, 0x57,
                0xa2, 0xb2, 0xb0, 0xfb, 0xd5, 0x0a, 0x4e, 0xb0, 0xbc, 0x63, 0x8f, 0x48, 0x12, 0x60, 0xe4, 0x3c,
                0xf6, 0xbd, 0x80, 0xcc, 0x16, 0xe0, 0x47, 0x8e, 0xa1, 0xb9, 0x2d, 0xdc, 0x9c, 0x6c, 0x4c, 0x0f,
            };
            CollectionAssert.AreEqual(expected, actual, $"Expected: {Convert.ToHexString(expected)}, actual: {Convert.ToHexString(actual)}");
        }
    }
}
